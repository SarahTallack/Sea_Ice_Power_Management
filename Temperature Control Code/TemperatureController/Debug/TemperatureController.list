
TemperatureController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006214  08006214  00016214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c8  080062c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d0  080062d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d0  080062d0  000162d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080062d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000078  08006350  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08006350  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb93  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f36  00000000  00000000  0002fc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00032848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028295  00000000  00000000  00033460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e607  00000000  00000000  0005b6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fde94  00000000  00000000  00069cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167b90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  00167be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061fc 	.word	0x080061fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080061fc 	.word	0x080061fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 fcf2 	bl	800174e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f86b 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f000 f955 	bl	800101c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d72:	f000 f8ad 	bl	8000ed0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d76:	f000 f921 	bl	8000fbc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	memset(print, 0, sizeof print);
 8000d7a:	2219      	movs	r2, #25
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4829      	ldr	r0, [pc, #164]	; (8000e24 <main+0xc4>)
 8000d80:	f004 fdc6 	bl	8005910 <memset>
	sprintf(print, "Hello\r\n");
 8000d84:	4928      	ldr	r1, [pc, #160]	; (8000e28 <main+0xc8>)
 8000d86:	4827      	ldr	r0, [pc, #156]	; (8000e24 <main+0xc4>)
 8000d88:	f004 fdca 	bl	8005920 <siprintf>
	HAL_UART_Transmit(&huart2, print, sizeof(print), 1000);
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	2219      	movs	r2, #25
 8000d92:	4924      	ldr	r1, [pc, #144]	; (8000e24 <main+0xc4>)
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <main+0xcc>)
 8000d96:	f004 f895 	bl	8004ec4 <HAL_UART_Transmit>
    /* USER CODE BEGIN 3 */

	while (mode == 1)
 8000d9a:	e03e      	b.n	8000e1a <main+0xba>
	{
		// Get ADC value
		HAL_ADC_Start(&hadc1);
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <main+0xd0>)
 8000d9e:	f001 f8bb 	bl	8001f18 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000da2:	f04f 31ff 	mov.w	r1, #4294967295
 8000da6:	4822      	ldr	r0, [pc, #136]	; (8000e30 <main+0xd0>)
 8000da8:	f001 f970 	bl	800208c <HAL_ADC_PollForConversion>
		uint32_t ADC = HAL_ADC_GetValue(&hadc1);
 8000dac:	4820      	ldr	r0, [pc, #128]	; (8000e30 <main+0xd0>)
 8000dae:	f001 fa45 	bl	800223c <HAL_ADC_GetValue>
 8000db2:	6078      	str	r0, [r7, #4]
		UART_Print(ADC, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 faaa 	bl	8001310 <UART_Print>

		// Convert ADC value to voltage
		Volt = ADC_to_Volt(ADC);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f9f3 	bl	80011a8 <ADC_to_Volt>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <main+0xd4>)
 8000dc6:	6013      	str	r3, [r2, #0]
		UART_Print(Volt, 1);
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <main+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fa9e 	bl	8001310 <UART_Print>

		// Convert voltage value to temperature
		Temp = Volt_to_Temp(Volt);
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <main+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fa01 	bl	80011e0 <Volt_to_Temp>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <main+0xd8>)
 8000de2:	6013      	str	r3, [r2, #0]
		memset(print, 0, sizeof print);
 8000de4:	2219      	movs	r2, #25
 8000de6:	2100      	movs	r1, #0
 8000de8:	480e      	ldr	r0, [pc, #56]	; (8000e24 <main+0xc4>)
 8000dea:	f004 fd91 	bl	8005910 <memset>
		sprintf(print, "Temperature: %d\r\n", Temp);
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <main+0xd8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4911      	ldr	r1, [pc, #68]	; (8000e3c <main+0xdc>)
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <main+0xc4>)
 8000df8:	f004 fd92 	bl	8005920 <siprintf>
		HAL_UART_Transmit(&huart2, print, sizeof(print), 1000);
 8000dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e00:	2219      	movs	r2, #25
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <main+0xc4>)
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <main+0xcc>)
 8000e06:	f004 f85d 	bl	8004ec4 <HAL_UART_Transmit>

		// Use temperature to control UART_Print
		Control_Heater(Temp);
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <main+0xd8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fa5a 	bl	80012c8 <Control_Heater>
		HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f000 fd0f 	bl	8001838 <HAL_Delay>
	while (mode == 1)
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <main+0xe0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d0bc      	beq.n	8000d9c <main+0x3c>
	memset(print, 0, sizeof print);
 8000e22:	e7aa      	b.n	8000d7a <main+0x1a>
 8000e24:	2000017c 	.word	0x2000017c
 8000e28:	08006214 	.word	0x08006214
 8000e2c:	200000f8 	.word	0x200000f8
 8000e30:	20000094 	.word	0x20000094
 8000e34:	20000198 	.word	0x20000198
 8000e38:	2000019c 	.word	0x2000019c
 8000e3c:	0800621c 	.word	0x0800621c
 8000e40:	200001a0 	.word	0x200001a0

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2244      	movs	r2, #68	; 0x44
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 fd5c 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e6a:	f002 fccb 	bl	8003804 <HAL_PWREx_ControlVoltageScaling>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e74:	f000 fa7c 	bl	8001370 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e84:	2360      	movs	r3, #96	; 0x60
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fd0d 	bl	80038b0 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e9c:	f000 fa68 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 f8d5 	bl	8004068 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ec4:	f000 fa54 	bl	8001370 <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3758      	adds	r7, #88	; 0x58
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f54:	f000 fe8a 	bl	8001c6c <HAL_ADC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f5e:	f000 fa07 	bl	8001370 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f6e:	f002 f879 	bl	8003064 <HAL_ADCEx_MultiModeConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f78:	f000 f9fa 	bl	8001370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f80:	2306      	movs	r3, #6
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f88:	237f      	movs	r3, #127	; 0x7f
 8000f8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f9a:	f001 fb95 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000fa4:	f000 f9e4 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	04300002 	.word	0x04300002

08000fbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART2_UART_Init+0x58>)
 8001000:	f003 ff12 	bl	8004e28 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800100a:	f000 f9b1 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000f8 	.word	0x200000f8
 8001018:	40004400 	.word	0x40004400

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b56      	ldr	r3, [pc, #344]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <MX_GPIO_Init+0x17c>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a52      	ldr	r2, [pc, #328]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b50      	ldr	r3, [pc, #320]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <MX_GPIO_Init+0x17c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a46      	ldr	r2, [pc, #280]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a40      	ldr	r2, [pc, #256]	; (8001198 <MX_GPIO_Init+0x17c>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <MX_GPIO_Init+0x17c>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f002 fb43 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HeatControl_GPIO_Port, HeatControl_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2104      	movs	r1, #4
 80010ba:	4838      	ldr	r0, [pc, #224]	; (800119c <MX_GPIO_Init+0x180>)
 80010bc:	f002 fb3e 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Indicator_GPIO_Port, Indicator_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2120      	movs	r1, #32
 80010c4:	4836      	ldr	r0, [pc, #216]	; (80011a0 <MX_GPIO_Init+0x184>)
 80010c6:	f002 fb39 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4830      	ldr	r0, [pc, #192]	; (80011a4 <MX_GPIO_Init+0x188>)
 80010e2:	f002 f981 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482a      	ldr	r0, [pc, #168]	; (80011a4 <MX_GPIO_Init+0x188>)
 80010fc:	f002 f974 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001100:	2320      	movs	r3, #32
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f002 f965 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HeatControl_Pin */
  GPIO_InitStruct.Pin = HeatControl_Pin;
 800111e:	2304      	movs	r3, #4
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HeatControl_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <MX_GPIO_Init+0x180>)
 8001136:	f002 f957 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ButtonInput_Pin */
  GPIO_InitStruct.Pin = ButtonInput_Pin;
 800113a:	2308      	movs	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonInput_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_GPIO_Init+0x184>)
 8001150:	f002 f94a 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Indicator_Pin */
  GPIO_InitStruct.Pin = Indicator_Pin;
 8001154:	2320      	movs	r3, #32
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Indicator_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_GPIO_Init+0x184>)
 800116c:	f002 f93c 	bl	80033e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2009      	movs	r0, #9
 8001176:	f002 f900 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800117a:	2009      	movs	r0, #9
 800117c:	f002 f919 	bl	80033b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2028      	movs	r0, #40	; 0x28
 8001186:	f002 f8f8 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f002 f911 	bl	80033b2 <HAL_NVIC_EnableIRQ>

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	48000c00 	.word	0x48000c00
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800

080011a8 <ADC_to_Volt>:

/* USER CODE BEGIN 4 */
uint32_t ADC_to_Volt(uint32_t ADC_val){
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint32_t volt = ADC_val*3300/4095;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f640 42e4 	movw	r2, #3300	; 0xce4
 80011b6:	fb03 f202 	mul.w	r2, r3, r2
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <ADC_to_Volt+0x30>)
 80011bc:	fba3 1302 	umull	r1, r3, r3, r2
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	0852      	lsrs	r2, r2, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	0adb      	lsrs	r3, r3, #11
 80011c8:	60fb      	str	r3, [r7, #12]
	return volt;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	00100101 	.word	0x00100101
 80011dc:	00000000 	.word	0x00000000

080011e0 <Volt_to_Temp>:

int Volt_to_Temp(uint32_t Volt){
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	 * temp = (Rt/R0 - 1)/0.00385
	 *
	*/

	// Combine the above formulae into on as C doesn't like the seperate equations :(
	int temp = (3300/100 * (Volt/165.66667 + 88.5579)/(3300-(Volt/165.66667 + 88.5579)) - 1)/0.00385;
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f983 	bl	80004f4 <__aeabi_ui2d>
 80011ee:	a32c      	add	r3, pc, #176	; (adr r3, 80012a0 <Volt_to_Temp+0xc0>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fb22 	bl	800083c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	a329      	add	r3, pc, #164	; (adr r3, 80012a8 <Volt_to_Temp+0xc8>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f839 	bl	800027c <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <Volt_to_Temp+0xe0>)
 8001218:	f7ff f9e6 	bl	80005e8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4614      	mov	r4, r2
 8001222:	461d      	mov	r5, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff f965 	bl	80004f4 <__aeabi_ui2d>
 800122a:	a31d      	add	r3, pc, #116	; (adr r3, 80012a0 <Volt_to_Temp+0xc0>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff fb04 	bl	800083c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	a31a      	add	r3, pc, #104	; (adr r3, 80012a8 <Volt_to_Temp+0xc8>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f81b 	bl	800027c <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	a119      	add	r1, pc, #100	; (adr r1, 80012b0 <Volt_to_Temp+0xd0>)
 800124c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001250:	f7ff f812 	bl	8000278 <__aeabi_dsub>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff faee 	bl	800083c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <Volt_to_Temp+0xe4>)
 800126e:	f7ff f803 	bl	8000278 <__aeabi_dsub>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	a30f      	add	r3, pc, #60	; (adr r3, 80012b8 <Volt_to_Temp+0xd8>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff fadc 	bl	800083c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fbbe 	bl	8000a0c <__aeabi_d2iz>
 8001290:	4603      	mov	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]
	return temp;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	5c52e72e 	.word	0x5c52e72e
 80012a4:	4064b555 	.word	0x4064b555
 80012a8:	a2339c0f 	.word	0xa2339c0f
 80012ac:	405623b4 	.word	0x405623b4
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40a9c800 	.word	0x40a9c800
 80012b8:	02de00d2 	.word	0x02de00d2
 80012bc:	3f6f8a09 	.word	0x3f6f8a09
 80012c0:	40408000 	.word	0x40408000
 80012c4:	3ff00000 	.word	0x3ff00000

080012c8 <Control_Heater>:

void Control_Heater(int Temp){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	if (Temp > Temp_high){
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <Control_Heater+0x3c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d905      	bls.n	80012e6 <Control_Heater+0x1e>
		// When reading goes above 25°C turn off
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2104      	movs	r1, #4
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <Control_Heater+0x40>)
 80012e0:	f002 fa2c 	bl	800373c <HAL_GPIO_WritePin>
	}
	else if (Temp < Temp_low){
		// When reading goes below 20°C turn on
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	}
}
 80012e4:	e009      	b.n	80012fa <Control_Heater+0x32>
	else if (Temp < Temp_low){
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <Control_Heater+0x44>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d204      	bcs.n	80012fa <Control_Heater+0x32>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2104      	movs	r1, #4
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <Control_Heater+0x40>)
 80012f6:	f002 fa21 	bl	800373c <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000004 	.word	0x20000004
 8001308:	48000c00 	.word	0x48000c00
 800130c:	20000000 	.word	0x20000000

08001310 <UART_Print>:

void UART_Print(uint32_t val, uint8_t type){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	memset(print, 0, sizeof print);
 800131c:	2219      	movs	r2, #25
 800131e:	2100      	movs	r1, #0
 8001320:	480f      	ldr	r0, [pc, #60]	; (8001360 <UART_Print+0x50>)
 8001322:	f004 faf5 	bl	8005910 <memset>
	if (type == 0){
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <UART_Print+0x28>
		sprintf(print, "ADC: %lu\r\n", val);
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <UART_Print+0x54>)
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <UART_Print+0x50>)
 8001332:	f004 faf5 	bl	8005920 <siprintf>
 8001336:	e007      	b.n	8001348 <UART_Print+0x38>
	}
	else if (type == 1){
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d104      	bne.n	8001348 <UART_Print+0x38>
		sprintf(print, "Voltage: %lu\r\n", val);
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4909      	ldr	r1, [pc, #36]	; (8001368 <UART_Print+0x58>)
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <UART_Print+0x50>)
 8001344:	f004 faec 	bl	8005920 <siprintf>
	}
	HAL_UART_Transmit(&huart2, print, sizeof(print), 1000);
 8001348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134c:	2219      	movs	r2, #25
 800134e:	4904      	ldr	r1, [pc, #16]	; (8001360 <UART_Print+0x50>)
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <UART_Print+0x5c>)
 8001352:	f003 fdb7 	bl	8004ec4 <HAL_UART_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000017c 	.word	0x2000017c
 8001364:	08006230 	.word	0x08006230
 8001368:	0800623c 	.word	0x0800623c
 800136c:	200000f8 	.word	0x200000f8

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ac      	sub	sp, #176	; 0xb0
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2288      	movs	r2, #136	; 0x88
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fa93 	bl	8005910 <memset>
  if(hadc->Instance==ADC1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_ADC_MspInit+0xd8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d14e      	bne.n	8001492 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800140a:	2310      	movs	r3, #16
 800140c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800141a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f843 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001430:	f7ff ff9e 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_ADC_MspInit+0xdc>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_ADC_MspInit+0xdc>)
 800143a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_ADC_MspInit+0xdc>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_ADC_MspInit+0xdc>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_ADC_MspInit+0xdc>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_ADC_MspInit+0xdc>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TempReading_Pin;
 8001464:	2301      	movs	r3, #1
 8001466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800146a:	230b      	movs	r3, #11
 800146c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(TempReading_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147a:	4619      	mov	r1, r3
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <HAL_ADC_MspInit+0xe0>)
 800147e:	f001 ffb3 	bl	80033e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2012      	movs	r0, #18
 8001488:	f001 ff77 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800148c:	2012      	movs	r0, #18
 800148e:	f001 ff90 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	37b0      	adds	r7, #176	; 0xb0
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	50040000 	.word	0x50040000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000800 	.word	0x48000800

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0ac      	sub	sp, #176	; 0xb0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2288      	movs	r2, #136	; 0x88
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fa21 	bl	8005910 <memset>
  if(huart->Instance==USART2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_UART_MspInit+0xb0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d13b      	bne.n	8001550 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014d8:	2302      	movs	r3, #2
 80014da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 ffe3 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f0:	f7ff ff3e 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_UART_MspInit+0xb4>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_UART_MspInit+0xb4>)
 80014fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_UART_MspInit+0xb4>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_UART_MspInit+0xb4>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_UART_MspInit+0xb4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_UART_MspInit+0xb4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001524:	230c      	movs	r3, #12
 8001526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153c:	2307      	movs	r3, #7
 800153e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 ff4c 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	37b0      	adds	r7, #176	; 0xb0
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40004400 	.word	0x40004400
 800155c:	40021000 	.word	0x40021000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f924 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  uint8_t start = HAL_GetTick();
 80015ba:	f000 f931 	bl	8001820 <HAL_GetTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  while((start+20)>HAL_GetTick());
 80015c2:	bf00      	nop
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3314      	adds	r3, #20
 80015c8:	461c      	mov	r4, r3
 80015ca:	f000 f929 	bl	8001820 <HAL_GetTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	429c      	cmp	r4, r3
 80015d2:	d8f7      	bhi.n	80015c4 <EXTI3_IRQHandler+0x10>

  if (mode == 0){
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <EXTI3_IRQHandler+0x68>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <EXTI3_IRQHandler+0x38>
	  mode = 1;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <EXTI3_IRQHandler+0x68>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80015e2:	2120      	movs	r1, #32
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <EXTI3_IRQHandler+0x6c>)
 80015e6:	f002 f8c1 	bl	800376c <HAL_GPIO_TogglePin>
 80015ea:	e00f      	b.n	800160c <EXTI3_IRQHandler+0x58>
  }
  else if (mode == 1){
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <EXTI3_IRQHandler+0x68>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10b      	bne.n	800160c <EXTI3_IRQHandler+0x58>
	  mode = 0;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <EXTI3_IRQHandler+0x68>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	  // Turn off LED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80015fa:	2120      	movs	r1, #32
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <EXTI3_IRQHandler+0x6c>)
 80015fe:	f002 f8b5 	bl	800376c <HAL_GPIO_TogglePin>

	  // Turn off heater
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2104      	movs	r1, #4
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <EXTI3_IRQHandler+0x70>)
 8001608:	f002 f898 	bl	800373c <HAL_GPIO_WritePin>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonInput_Pin);
 800160c:	2008      	movs	r0, #8
 800160e:	f002 f8c7 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	200001a0 	.word	0x200001a0
 8001620:	48000400 	.word	0x48000400
 8001624:	48000c00 	.word	0x48000c00

08001628 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <ADC1_2_IRQHandler+0x10>)
 800162e:	f000 fe13 	bl	8002258 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000094 	.word	0x20000094

0800163c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  uint8_t start = HAL_GetTick();
 8001642:	f000 f8ed 	bl	8001820 <HAL_GetTick>
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  while((start+20)>HAL_GetTick());
 800164a:	bf00      	nop
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3314      	adds	r3, #20
 8001650:	461c      	mov	r4, r3
 8001652:	f000 f8e5 	bl	8001820 <HAL_GetTick>
 8001656:	4603      	mov	r3, r0
 8001658:	429c      	cmp	r4, r3
 800165a:	d8f7      	bhi.n	800164c <EXTI15_10_IRQHandler+0x10>
//	  else {
//		  tDelay = 250;
//	  }
//  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800165c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001660:	f002 f89e 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f004 f90e 	bl	80058bc <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20018000 	.word	0x20018000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200001a4 	.word	0x200001a4
 80016d4:	200001c0 	.word	0x200001c0

080016d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001700:	f7ff ffea 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <LoopForever+0x6>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <LoopForever+0xe>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <LoopForever+0x16>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f004 f8cd 	bl	80058c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172e:	f7ff fb17 	bl	8000d60 <main>

08001732 <LoopForever>:

LoopForever:
    b LoopForever
 8001732:	e7fe      	b.n	8001732 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001734:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001740:	080062d8 	.word	0x080062d8
  ldr r2, =_sbss
 8001744:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001748:	200001bc 	.word	0x200001bc

0800174c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC3_IRQHandler>

0800174e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f001 fe03 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f80e 	bl	8001780 <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	e001      	b.n	8001774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001770:	f7ff fe04 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001774:	79fb      	ldrb	r3, [r7, #7]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_InitTick+0x6c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_InitTick+0x70>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_InitTick+0x6c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fe0f 	bl	80033ce <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d809      	bhi.n	80017d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f001 fdd9 	bl	800337a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_InitTick+0x74>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e007      	b.n	80017e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e004      	b.n	80017e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e001      	b.n	80017e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000010 	.word	0x20000010
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000010 	.word	0x20000010
 800181c:	200001a8 	.word	0x200001a8

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200001a8 	.word	0x200001a8

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000010 	.word	0x20000010

08001880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3360      	adds	r3, #96	; 0x60
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <LL_ADC_SetOffset+0x44>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	4313      	orrs	r3, r2
 8001918:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001920:	bf00      	nop
 8001922:	371c      	adds	r7, #28
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	03fff000 	.word	0x03fff000

08001930 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3360      	adds	r3, #96	; 0x60
 800193e:	461a      	mov	r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3360      	adds	r3, #96	; 0x60
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	211f      	movs	r1, #31
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 011f 	and.w	r1, r3, #31
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b087      	sub	sp, #28
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3314      	adds	r3, #20
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	0e5b      	lsrs	r3, r3, #25
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	0d1b      	lsrs	r3, r3, #20
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2107      	movs	r1, #7
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	0d1b      	lsrs	r3, r3, #20
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a80:	bf00      	nop
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0318 	and.w	r3, r3, #24
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ab0:	40d9      	lsrs	r1, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	431a      	orrs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	0007ffff 	.word	0x0007ffff

08001ad4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6093      	str	r3, [r2, #8]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b94:	d101      	bne.n	8001b9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <LL_ADC_IsEnabled+0x18>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <LL_ADC_IsEnabled+0x1a>
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0a:	f043 0204 	orr.w	r2, r3, #4
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d101      	bne.n	8001c5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e136      	b.n	8001ef4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fb95 	bl	80013c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff3f 	bl	8001b30 <LL_ADC_IsDeepPowerDownEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff25 	bl	8001b0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff5a 	bl	8001b80 <LL_ADC_IsInternalRegulatorEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d115      	bne.n	8001cfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff3e 	bl	8001b58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cdc:	4b87      	ldr	r3, [pc, #540]	; (8001efc <HAL_ADC_Init+0x290>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	099b      	lsrs	r3, r3, #6
 8001ce2:	4a87      	ldr	r2, [pc, #540]	; (8001f00 <HAL_ADC_Init+0x294>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf0:	e002      	b.n	8001cf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f9      	bne.n	8001cf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff3c 	bl	8001b80 <LL_ADC_IsInternalRegulatorEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff75 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001d34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 80cf 	bne.w	8001ee2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 80cb 	bne.w	8001ee2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff35 	bl	8001bd0 <LL_ADC_IsEnabled>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d115      	bne.n	8001d98 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d6c:	4865      	ldr	r0, [pc, #404]	; (8001f04 <HAL_ADC_Init+0x298>)
 8001d6e:	f7ff ff2f 	bl	8001bd0 <LL_ADC_IsEnabled>
 8001d72:	4604      	mov	r4, r0
 8001d74:	4864      	ldr	r0, [pc, #400]	; (8001f08 <HAL_ADC_Init+0x29c>)
 8001d76:	f7ff ff2b 	bl	8001bd0 <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	431c      	orrs	r4, r3
 8001d7e:	4863      	ldr	r0, [pc, #396]	; (8001f0c <HAL_ADC_Init+0x2a0>)
 8001d80:	f7ff ff26 	bl	8001bd0 <LL_ADC_IsEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4323      	orrs	r3, r4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4619      	mov	r1, r3
 8001d92:	485f      	ldr	r0, [pc, #380]	; (8001f10 <HAL_ADC_Init+0x2a4>)
 8001d94:	f7ff fd74 	bl	8001880 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e5b      	ldrb	r3, [r3, #25]
 8001d9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001da8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	045b      	lsls	r3, r3, #17
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_ADC_Init+0x2a8>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff08 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001e0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff15 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 8001e1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d13d      	bne.n	8001e9e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d13a      	bne.n	8001e9e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e44:	f023 0302 	bic.w	r3, r3, #2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d118      	bne.n	8001e8e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	e007      	b.n	8001e9e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f023 010f 	bic.w	r1, r3, #15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebe:	e007      	b.n	8001ed0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 020f 	bic.w	r2, r2, #15
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
 8001ee0:	e007      	b.n	8001ef2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3724      	adds	r7, #36	; 0x24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	20000008 	.word	0x20000008
 8001f00:	053e2d63 	.word	0x053e2d63
 8001f04:	50040000 	.word	0x50040000
 8001f08:	50040100 	.word	0x50040100
 8001f0c:	50040200 	.word	0x50040200
 8001f10:	50040300 	.word	0x50040300
 8001f14:	fff0c007 	.word	0xfff0c007

08001f18 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f20:	4857      	ldr	r0, [pc, #348]	; (8002080 <HAL_ADC_Start+0x168>)
 8001f22:	f7ff fdd7 	bl	8001ad4 <LL_ADC_GetMultimode>
 8001f26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fe76 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 809c 	bne.w	8002072 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_Start+0x30>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e097      	b.n	8002078 <HAL_ADC_Start+0x160>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 ffa9 	bl	8002ea8 <ADC_Enable>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8083 	bne.w	8002068 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a42      	ldr	r2, [pc, #264]	; (8002084 <HAL_ADC_Start+0x16c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_Start+0x6e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_Start+0x70>
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_ADC_Start+0x170>)
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d002      	beq.n	8001f96 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fae:	d106      	bne.n	8001fbe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f023 0206 	bic.w	r2, r3, #6
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58
 8001fbc:	e002      	b.n	8001fc4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	221c      	movs	r2, #28
 8001fca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a2a      	ldr	r2, [pc, #168]	; (8002084 <HAL_ADC_Start+0x16c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d002      	beq.n	8001fe4 <HAL_ADC_Start+0xcc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e000      	b.n	8001fe6 <HAL_ADC_Start+0xce>
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_ADC_Start+0x170>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d008      	beq.n	8002000 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d002      	beq.n	8002000 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d114      	bne.n	800202a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fde7 	bl	8001bf6 <LL_ADC_REG_StartConversion>
 8002028:	e025      	b.n	8002076 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_ADC_Start+0x16c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d002      	beq.n	8002046 <HAL_ADC_Start+0x12e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	e000      	b.n	8002048 <HAL_ADC_Start+0x130>
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_ADC_Start+0x170>)
 8002048:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00f      	beq.n	8002076 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800205e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
 8002066:	e006      	b.n	8002076 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002070:	e001      	b.n	8002076 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	50040300 	.word	0x50040300
 8002084:	50040100 	.word	0x50040100
 8002088:	50040000 	.word	0x50040000

0800208c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002096:	4866      	ldr	r0, [pc, #408]	; (8002230 <HAL_ADC_PollForConversion+0x1a4>)
 8002098:	f7ff fd1c 	bl	8001ad4 <LL_ADC_GetMultimode>
 800209c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d102      	bne.n	80020ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020a6:	2308      	movs	r3, #8
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e02a      	b.n	8002102 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d002      	beq.n	80020be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b09      	cmp	r3, #9
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0a4      	b.n	8002226 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020dc:	2304      	movs	r3, #4
 80020de:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020e0:	e00f      	b.n	8002102 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020e2:	4853      	ldr	r0, [pc, #332]	; (8002230 <HAL_ADC_PollForConversion+0x1a4>)
 80020e4:	f7ff fd04 	bl	8001af0 <LL_ADC_GetMultiDMATransfer>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e093      	b.n	8002226 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020fe:	2304      	movs	r3, #4
 8002100:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002102:	f7ff fb8d 	bl	8001820 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002108:	e021      	b.n	800214e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d01d      	beq.n	800214e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002112:	f7ff fb85 	bl	8001820 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <HAL_ADC_PollForConversion+0x9c>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d112      	bne.n	800214e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10b      	bne.n	800214e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0204 	orr.w	r2, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e06b      	b.n	8002226 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0d6      	beq.n	800210a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fc10 	bl	8001992 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01c      	beq.n	80021b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e5b      	ldrb	r3, [r3, #25]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d118      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b08      	cmp	r3, #8
 800218c:	d111      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_ADC_PollForConversion+0x1a8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d002      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x136>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	e000      	b.n	80021c4 <HAL_ADC_PollForConversion+0x138>
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_ADC_PollForConversion+0x1ac>)
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d008      	beq.n	80021de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d002      	beq.n	80021de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b09      	cmp	r3, #9
 80021dc:	d104      	bne.n	80021e8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e00c      	b.n	8002202 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_ADC_PollForConversion+0x1a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d002      	beq.n	80021f8 <HAL_ADC_PollForConversion+0x16c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e000      	b.n	80021fa <HAL_ADC_PollForConversion+0x16e>
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_ADC_PollForConversion+0x1ac>)
 80021fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d104      	bne.n	8002212 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2208      	movs	r2, #8
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e008      	b.n	8002224 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	220c      	movs	r2, #12
 8002222:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	50040300 	.word	0x50040300
 8002234:	50040100 	.word	0x50040100
 8002238:	50040000 	.word	0x50040000

0800223c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002274:	4882      	ldr	r0, [pc, #520]	; (8002480 <HAL_ADC_IRQHandler+0x228>)
 8002276:	f7ff fc2d 	bl	8001ad4 <LL_ADC_GetMultimode>
 800227a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d017      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x5e>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d012      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fed1 	bl	8003050 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2202      	movs	r2, #2
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_ADC_IRQHandler+0x72>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8083 	beq.w	80023dc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d07d      	beq.n	80023dc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fb48 	bl	8001992 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d062      	beq.n	80023ce <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5d      	ldr	r2, [pc, #372]	; (8002484 <HAL_ADC_IRQHandler+0x22c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d002      	beq.n	8002318 <HAL_ADC_IRQHandler+0xc0>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e000      	b.n	800231a <HAL_ADC_IRQHandler+0xc2>
 8002318:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_ADC_IRQHandler+0x230>)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4293      	cmp	r3, r2
 8002320:	d008      	beq.n	8002334 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d002      	beq.n	8002334 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b09      	cmp	r3, #9
 8002332:	d104      	bne.n	800233e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	e00c      	b.n	8002358 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a50      	ldr	r2, [pc, #320]	; (8002484 <HAL_ADC_IRQHandler+0x22c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d002      	beq.n	800234e <HAL_ADC_IRQHandler+0xf6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e000      	b.n	8002350 <HAL_ADC_IRQHandler+0xf8>
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_ADC_IRQHandler+0x230>)
 8002350:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d135      	bne.n	80023ce <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b08      	cmp	r3, #8
 800236e:	d12e      	bne.n	80023ce <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fc52 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11a      	bne.n	80023b6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020c 	bic.w	r2, r2, #12
 800238e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d112      	bne.n	80023ce <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
 80023b4:	e00b      	b.n	80023ce <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f95c 	bl	800268c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	220c      	movs	r2, #12
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x198>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 809f 	beq.w	800253a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8099 	beq.w	800253a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff faf3 	bl	8001a10 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800242a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff faae 	bl	8001992 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002436:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_ADC_IRQHandler+0x22c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d002      	beq.n	8002448 <HAL_ADC_IRQHandler+0x1f0>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e000      	b.n	800244a <HAL_ADC_IRQHandler+0x1f2>
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_ADC_IRQHandler+0x230>)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4293      	cmp	r3, r2
 8002450:	d008      	beq.n	8002464 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d002      	beq.n	8002464 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b07      	cmp	r3, #7
 8002462:	d104      	bne.n	800246e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	623b      	str	r3, [r7, #32]
 800246c:	e013      	b.n	8002496 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_ADC_IRQHandler+0x22c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_ADC_IRQHandler+0x234>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_ADC_IRQHandler+0x236>
 800247e:	bf00      	nop
 8002480:	50040300 	.word	0x50040300
 8002484:	50040100 	.word	0x50040100
 8002488:	50040000 	.word	0x50040000
 800248c:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <HAL_ADC_IRQHandler+0x42c>)
 800248e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d047      	beq.n	800252c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_ADC_IRQHandler+0x25e>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03f      	beq.n	800252c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d13a      	bne.n	800252c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d133      	bne.n	800252c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d12e      	bne.n	800252c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fbb6 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11a      	bne.n	8002514 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d112      	bne.n	800252c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
 8002512:	e00b      	b.n	800252c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	f043 0210 	orr.w	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fd67 	bl	8003000 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2260      	movs	r2, #96	; 0x60
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d011      	beq.n	8002568 <HAL_ADC_IRQHandler+0x310>
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8a0 	bl	80026a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_ADC_IRQHandler+0x340>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fd4d 	bl	8003028 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d012      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x370>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fd3f 	bl	800303c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d036      	beq.n	8002640 <HAL_ADC_IRQHandler+0x3e8>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d031      	beq.n	8002640 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80025e4:	2301      	movs	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e014      	b.n	8002614 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025f0:	4825      	ldr	r0, [pc, #148]	; (8002688 <HAL_ADC_IRQHandler+0x430>)
 80025f2:	f7ff fa7d 	bl	8001af0 <LL_ADC_GetMultiDMATransfer>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80025fc:	2301      	movs	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	e008      	b.n	8002614 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10e      	bne.n	8002638 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f83e 	bl	80026b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2210      	movs	r2, #16
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d018      	beq.n	800267c <HAL_ADC_IRQHandler+0x424>
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f043 0208 	orr.w	r2, r3, #8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002674:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fccc 	bl	8003014 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	50040000 	.word	0x50040000
 8002688:	50040300 	.word	0x50040300

0800268c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0b6      	sub	sp, #216	; 0xd8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x22>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e3c7      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x7b2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa91 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 83a8 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d824      	bhi.n	8002756 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	3b02      	subs	r3, #2
 8002712:	2b03      	cmp	r3, #3
 8002714:	d81b      	bhi.n	800274e <HAL_ADC_ConfigChannel+0x86>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_ADC_ConfigChannel+0x54>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	0800272d 	.word	0x0800272d
 8002720:	08002735 	.word	0x08002735
 8002724:	0800273d 	.word	0x0800273d
 8002728:	08002745 	.word	0x08002745
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	220c      	movs	r2, #12
 8002730:	605a      	str	r2, [r3, #4]
          break;
 8002732:	e011      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2212      	movs	r2, #18
 8002738:	605a      	str	r2, [r3, #4]
          break;
 800273a:	e00d      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2218      	movs	r2, #24
 8002740:	605a      	str	r2, [r3, #4]
          break;
 8002742:	e009      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800274a:	605a      	str	r2, [r3, #4]
          break;
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2206      	movs	r2, #6
 8002752:	605a      	str	r2, [r3, #4]
          break;
 8002754:	e000      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002756:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	f7ff f927 	bl	80019b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fa55 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8002774:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fa61 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 8002782:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002786:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 81a6 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 81a1 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f7ff f945 	bl	8001a36 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d00a      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6919      	ldr	r1, [r3, #16]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027de:	f7ff f883 	bl	80018e8 <LL_ADC_SetOffset>
 80027e2:	e17b      	b.n	8002adc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f8a0 	bl	8001930 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x148>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f895 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	f003 021f 	and.w	r2, r3, #31
 800280e:	e01e      	b.n	800284e <HAL_ADC_ConfigChannel+0x186>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff f88a 	bl	8001930 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800282e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e004      	b.n	800284c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x19e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	e018      	b.n	8002898 <HAL_ADC_ConfigChannel+0x1d0>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800287a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800287e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e004      	b.n	8002898 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800288e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff f859 	bl	800195c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f83d 	bl	8001930 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f832 	bl	8001930 <LL_ADC_GetOffsetChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	e01e      	b.n	8002914 <HAL_ADC_ConfigChannel+0x24c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f827 	bl	8001930 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e004      	b.n	8002912 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_ConfigChannel+0x264>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	e018      	b.n	800295e <HAL_ADC_ConfigChannel+0x296>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e004      	b.n	800295e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800295e:	429a      	cmp	r2, r3
 8002960:	d106      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fff6 	bl	800195c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe ffda 	bl	8001930 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_ADC_ConfigChannel+0x2d4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2102      	movs	r1, #2
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe ffcf 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	e01e      	b.n	80029da <HAL_ADC_ConfigChannel+0x312>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe ffc4 	bl	8001930 <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e004      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x32a>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	e016      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x358>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e004      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe ff95 	bl	800195c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2103      	movs	r1, #3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe ff79 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x396>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe ff6e 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	e017      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x3c6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe ff63 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x3de>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e9b      	lsrs	r3, r3, #26
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	e011      	b.n	8002aca <HAL_ADC_ConfigChannel+0x402>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ff40 	bl	800195c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f875 	bl	8001bd0 <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 813f 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f7fe ffc6 	bl	8001a8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a8e      	ldr	r2, [pc, #568]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 8130 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x46c>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e019      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x4a0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	bf94      	ite	ls
 8002b62:	2301      	movls	r3, #1
 8002b64:	2300      	movhi	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d079      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x4c0>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b86:	e015      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x4ec>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x50c>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	e017      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x53c>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	ea42 0103 	orr.w	r1, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x562>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	e018      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x594>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	e080      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x5b4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	e015      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x5e0>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x600>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	e017      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x630>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	61fb      	str	r3, [r7, #28]
  return result;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x65c>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b1e      	subs	r3, #30
 8002d1c:	051b      	lsls	r3, r3, #20
 8002d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d22:	e01d      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x698>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	613b      	str	r3, [r7, #16]
  return result;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e005      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x684>
 8002d40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	051b      	lsls	r3, r3, #20
 8002d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d60:	430b      	orrs	r3, r1
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fe fe65 	bl	8001a36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d07a      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d78:	4843      	ldr	r0, [pc, #268]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7a:	f7fe fda7 	bl	80018cc <LL_ADC_GetCommonPathInternalCh>
 8002d7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a41      	ldr	r2, [pc, #260]	; (8002e8c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d12c      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d126      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x6e4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d15d      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002db4:	4619      	mov	r1, r3
 8002db6:	4834      	ldr	r0, [pc, #208]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002db8:	f7fe fd75 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_ADC_ConfigChannel+0x7d4>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dd6:	e002      	b.n	8002dde <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f9      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de4:	e040      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d118      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x75a>
 8002df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d112      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_ConfigChannel+0x748>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d12d      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481b      	ldr	r0, [pc, #108]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e1c:	f7fe fd43 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e024      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d120      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d115      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e4e:	f7fe fd2a 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e00c      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e66:	e002      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e68:	bf00      	nop
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	37d8      	adds	r7, #216	; 0xd8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	80080000 	.word	0x80080000
 8002e88:	50040300 	.word	0x50040300
 8002e8c:	c7520000 	.word	0xc7520000
 8002e90:	50040000 	.word	0x50040000
 8002e94:	50040200 	.word	0x50040200
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	053e2d63 	.word	0x053e2d63
 8002ea0:	cb840000 	.word	0xcb840000
 8002ea4:	80000001 	.word	0x80000001

08002ea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fe89 	bl	8001bd0 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d169      	bne.n	8002f98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <ADC_Enable+0xfc>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00d      	beq.n	8002eee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e055      	b.n	8002f9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fe58 	bl	8001ba8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ef8:	482b      	ldr	r0, [pc, #172]	; (8002fa8 <ADC_Enable+0x100>)
 8002efa:	f7fe fce7 	bl	80018cc <LL_ADC_GetCommonPathInternalCh>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <ADC_Enable+0x104>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <ADC_Enable+0x108>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f22:	e002      	b.n	8002f2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f9      	bne.n	8002f24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fc76 	bl	8001820 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f36:	e028      	b.n	8002f8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fe47 	bl	8001bd0 <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fe2b 	bl	8001ba8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f52:	f7fe fc65 	bl	8001820 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d914      	bls.n	8002f8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d00d      	beq.n	8002f8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d1cf      	bne.n	8002f38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	8000003f 	.word	0x8000003f
 8002fa8:	50040300 	.word	0x50040300
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	053e2d63 	.word	0x053e2d63

08002fb4 <LL_ADC_IsEnabled>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <LL_ADC_IsEnabled+0x18>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <LL_ADC_IsEnabled+0x1a>
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_REG_IsConversionOngoing>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d101      	bne.n	8002ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b09f      	sub	sp, #124	; 0x7c
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800307e:	2302      	movs	r3, #2
 8003080:	e093      	b.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800308a:	2300      	movs	r3, #0
 800308c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800308e:	2300      	movs	r3, #0
 8003090:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a47      	ldr	r2, [pc, #284]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	e001      	b.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e072      	b.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff87 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 80030cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff81 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d154      	bne.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d151      	bne.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02c      	beq.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003102:	035b      	lsls	r3, r3, #13
 8003104:	430b      	orrs	r3, r1
 8003106:	431a      	orrs	r2, r3
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800310c:	4829      	ldr	r0, [pc, #164]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800310e:	f7ff ff51 	bl	8002fb4 <LL_ADC_IsEnabled>
 8003112:	4604      	mov	r4, r0
 8003114:	4828      	ldr	r0, [pc, #160]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003116:	f7ff ff4d 	bl	8002fb4 <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	431c      	orrs	r4, r3
 800311e:	4828      	ldr	r0, [pc, #160]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003120:	f7ff ff48 	bl	8002fb4 <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	4323      	orrs	r3, r4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d137      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800312c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003134:	f023 030f 	bic.w	r3, r3, #15
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6811      	ldr	r1, [r2, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	430a      	orrs	r2, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003148:	e028      	b.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800314a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003154:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003156:	4817      	ldr	r0, [pc, #92]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003158:	f7ff ff2c 	bl	8002fb4 <LL_ADC_IsEnabled>
 800315c:	4604      	mov	r4, r0
 800315e:	4816      	ldr	r0, [pc, #88]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003160:	f7ff ff28 	bl	8002fb4 <LL_ADC_IsEnabled>
 8003164:	4603      	mov	r3, r0
 8003166:	431c      	orrs	r4, r3
 8003168:	4815      	ldr	r0, [pc, #84]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800316a:	f7ff ff23 	bl	8002fb4 <LL_ADC_IsEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	4323      	orrs	r3, r4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d112      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800317e:	f023 030f 	bic.w	r3, r3, #15
 8003182:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003184:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003186:	e009      	b.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800319a:	e000      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800319c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	377c      	adds	r7, #124	; 0x7c
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	50040000 	.word	0x50040000
 80031b8:	50040100 	.word	0x50040100
 80031bc:	50040300 	.word	0x50040300
 80031c0:	50040200 	.word	0x50040200

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	; (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	; (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff3e 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff8e 	bl	80032b8 <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5d 	bl	8003264 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff31 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa2 	bl	8003320 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f6:	e17f      	b.n	80036f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8171 	beq.w	80036f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d005      	beq.n	8003428 <HAL_GPIO_Init+0x40>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d130      	bne.n	800348a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800345e:	2201      	movs	r2, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0201 	and.w	r2, r3, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d118      	bne.n	80034c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	6939      	ldr	r1, [r7, #16]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80ac 	beq.w	80036f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <HAL_GPIO_Init+0x330>)
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <HAL_GPIO_Init+0x330>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6613      	str	r3, [r2, #96]	; 0x60
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_GPIO_Init+0x330>)
 80035a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035b2:	4a5a      	ldr	r2, [pc, #360]	; (800371c <HAL_GPIO_Init+0x334>)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035dc:	d025      	beq.n	800362a <HAL_GPIO_Init+0x242>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4f      	ldr	r2, [pc, #316]	; (8003720 <HAL_GPIO_Init+0x338>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <HAL_GPIO_Init+0x23e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4e      	ldr	r2, [pc, #312]	; (8003724 <HAL_GPIO_Init+0x33c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x23a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <HAL_GPIO_Init+0x340>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x236>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4c      	ldr	r2, [pc, #304]	; (800372c <HAL_GPIO_Init+0x344>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x232>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_GPIO_Init+0x348>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x22e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_GPIO_Init+0x34c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x22a>
 800360e:	2306      	movs	r3, #6
 8003610:	e00c      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003612:	2307      	movs	r3, #7
 8003614:	e00a      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003616:	2305      	movs	r3, #5
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x244>
 800361a:	2304      	movs	r3, #4
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x244>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x244>
 800362a:	2300      	movs	r3, #0
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	f002 0203 	and.w	r2, r2, #3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <HAL_GPIO_Init+0x334>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_GPIO_Init+0x350>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800366e:	4a32      	ldr	r2, [pc, #200]	; (8003738 <HAL_GPIO_Init+0x350>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003674:	4b30      	ldr	r3, [pc, #192]	; (8003738 <HAL_GPIO_Init+0x350>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_GPIO_Init+0x350>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_GPIO_Init+0x350>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_GPIO_Init+0x350>)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_GPIO_Init+0x350>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_GPIO_Init+0x350>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	f47f ae78 	bne.w	80033f8 <HAL_GPIO_Init+0x10>
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	40010000 	.word	0x40010000
 8003720:	48000400 	.word	0x48000400
 8003724:	48000800 	.word	0x48000800
 8003728:	48000c00 	.word	0x48000c00
 800372c:	48001000 	.word	0x48001000
 8003730:	48001400 	.word	0x48001400
 8003734:	48001800 	.word	0x48001800
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800374c:	787b      	ldrb	r3, [r7, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003758:	e002      	b.n	8003760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43d9      	mvns	r1, r3
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	400b      	ands	r3, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f806 	bl	80037d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40010400 	.word	0x40010400

080037d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_PWREx_GetVoltageRange+0x18>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d130      	bne.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800381c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003820:	d038      	beq.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2232      	movs	r2, #50	; 0x32
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0c9b      	lsrs	r3, r3, #18
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003848:	e002      	b.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b01      	subs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385c:	d102      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f2      	bne.n	800384a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003870:	d110      	bne.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003882:	d007      	beq.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000
 80038a8:	20000008 	.word	0x20000008
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e3ca      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b97      	ldr	r3, [pc, #604]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4b94      	ldr	r3, [pc, #592]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80e4 	beq.w	8003aac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_RCC_OscConfig+0x4a>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	f040 808b 	bne.w	8003a08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 8087 	bne.w	8003a08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038fa:	4b89      	ldr	r3, [pc, #548]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e3a2      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	4b82      	ldr	r3, [pc, #520]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_RCC_OscConfig+0x7c>
 8003922:	4b7f      	ldr	r3, [pc, #508]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392a:	e005      	b.n	8003938 <HAL_RCC_OscConfig+0x88>
 800392c:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800392e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003938:	4293      	cmp	r3, r2
 800393a:	d223      	bcs.n	8003984 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd55 	bl	80043f0 <RCC_SetFlashLatencyFromMSIRange>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e383      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003950:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a72      	ldr	r2, [pc, #456]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b70      	ldr	r3, [pc, #448]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	496d      	ldr	r1, [pc, #436]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	4968      	ldr	r1, [pc, #416]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
 8003982:	e025      	b.n	80039d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4960      	ldr	r1, [pc, #384]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	495b      	ldr	r1, [pc, #364]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fd15 	bl	80043f0 <RCC_SetFlashLatencyFromMSIRange>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e343      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d0:	f000 fc4a 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b52      	ldr	r3, [pc, #328]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	4950      	ldr	r1, [pc, #320]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	4a4e      	ldr	r2, [pc, #312]	; (8003b28 <HAL_RCC_OscConfig+0x278>)
 80039ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039f0:	4b4e      	ldr	r3, [pc, #312]	; (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fec3 	bl	8001780 <HAL_InitTick>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d052      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	e327      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d032      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a42      	ldr	r2, [pc, #264]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd ff00 	bl	8001820 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a24:	f7fd fefc 	bl	8001820 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e310      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a36:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a36      	ldr	r2, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4931      	ldr	r1, [pc, #196]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	492c      	ldr	r1, [pc, #176]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e01a      	b.n	8003aac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a82:	f7fd fecd 	bl	8001820 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a8a:	f7fd fec9 	bl	8001820 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e2dd      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x1da>
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d074      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x21a>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d10e      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d064      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d160      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e2ba      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x24a>
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e026      	b.n	8003b48 <HAL_RCC_OscConfig+0x298>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b02:	d115      	bne.n	8003b30 <HAL_RCC_OscConfig+0x280>
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a02      	ldr	r2, [pc, #8]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x298>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800624c 	.word	0x0800624c
 8003b28:	20000008 	.word	0x20000008
 8003b2c:	2000000c 	.word	0x2000000c
 8003b30:	4ba0      	ldr	r3, [pc, #640]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a9f      	ldr	r2, [pc, #636]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b9d      	ldr	r3, [pc, #628]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a9c      	ldr	r2, [pc, #624]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fe66 	bl	8001820 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fe62 	bl	8001820 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e276      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2a8>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fe52 	bl	8001820 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd fe4e 	bl	8001820 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e262      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2d0>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d060      	beq.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x310>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d116      	bne.n	8003bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x328>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e23f      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	4973      	ldr	r1, [pc, #460]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bec:	e040      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d023      	beq.n	8003c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf6:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fe0d 	bl	8001820 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fe09 	bl	8001820 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e21d      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1c:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b62      	ldr	r3, [pc, #392]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	495f      	ldr	r1, [pc, #380]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
 8003c3c:	e018      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fde9 	bl	8001820 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fd fde5 	bl	8001820 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1f9      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03c      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c84:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fdc4 	bl	8001820 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fdc0 	bl	8001820 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1d4      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ef      	beq.n	8003c9c <HAL_RCC_OscConfig+0x3ec>
 8003cbc:	e01b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	4a3b      	ldr	r2, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fda7 	bl	8001820 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fd fda3 	bl	8001820 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1b7      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a6 	beq.w	8003e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d118      	bne.n	8003d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d48:	f7fd fd6a 	bl	8001820 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd fd66 	bl	8001820 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e17a      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4d8>
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d86:	e029      	b.n	8003ddc <HAL_RCC_OscConfig+0x52c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d115      	bne.n	8003dbc <HAL_RCC_OscConfig+0x50c>
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db0:	e014      	b.n	8003ddc <HAL_RCC_OscConfig+0x52c>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	4b9c      	ldr	r3, [pc, #624]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	4a9b      	ldr	r2, [pc, #620]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dcc:	4b98      	ldr	r3, [pc, #608]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	4a97      	ldr	r2, [pc, #604]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd fd1c 	bl	8001820 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd fd18 	bl	8001820 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e12a      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e02:	4b8b      	ldr	r3, [pc, #556]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ed      	beq.n	8003dec <HAL_RCC_OscConfig+0x53c>
 8003e10:	e015      	b.n	8003e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7fd fd05 	bl	8001820 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd fd01 	bl	8001820 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e113      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e30:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ed      	bne.n	8003e1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b7a      	ldr	r3, [pc, #488]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	4a79      	ldr	r2, [pc, #484]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80fe 	beq.w	8004056 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	f040 80d0 	bne.w	8004004 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e64:	4b72      	ldr	r3, [pc, #456]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0203 	and.w	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d130      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	3b01      	subs	r3, #1
 8003e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d127      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d11f      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea4:	2a07      	cmp	r2, #7
 8003ea6:	bf14      	ite	ne
 8003ea8:	2201      	movne	r2, #1
 8003eaa:	2200      	moveq	r2, #0
 8003eac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d113      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d06e      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	d069      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003eec:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0ad      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003efc:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f08:	f7fd fc8a 	bl	8001820 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd fc86 	bl	8001820 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e09a      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f22:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	4b40      	ldr	r3, [pc, #256]	; (8004034 <HAL_RCC_OscConfig+0x784>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	4311      	orrs	r1, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f48:	0212      	lsls	r2, r2, #8
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f50:	0852      	lsrs	r2, r2, #1
 8003f52:	3a01      	subs	r2, #1
 8003f54:	0552      	lsls	r2, r2, #21
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f5c:	0852      	lsrs	r2, r2, #1
 8003f5e:	3a01      	subs	r2, #1
 8003f60:	0652      	lsls	r2, r2, #25
 8003f62:	4311      	orrs	r1, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f68:	0912      	lsrs	r2, r2, #4
 8003f6a:	0452      	lsls	r2, r2, #17
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	4930      	ldr	r1, [pc, #192]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f74:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f8c:	f7fd fc48 	bl	8001820 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd fc44 	bl	8001820 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e058      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb2:	e050      	b.n	8004056 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e04f      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d148      	bne.n	8004056 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fdc:	f7fd fc20 	bl	8001820 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd fc1c 	bl	8001820 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e030      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x734>
 8004002:	e028      	b.n	8004056 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d023      	beq.n	8004052 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <HAL_RCC_OscConfig+0x780>)
 8004010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fd fc03 	bl	8001820 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401c:	e00c      	b.n	8004038 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fd fbff 	bl	8001820 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d905      	bls.n	8004038 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e013      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
 8004030:	40021000 	.word	0x40021000
 8004034:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_OscConfig+0x7b0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ec      	bne.n	800401e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_OscConfig+0x7b0>)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	4905      	ldr	r1, [pc, #20]	; (8004060 <HAL_RCC_OscConfig+0x7b0>)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x7b4>)
 800404c:	4013      	ands	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
 8004050:	e001      	b.n	8004056 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000
 8004064:	feeefffc 	.word	0xfeeefffc

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0e7      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b75      	ldr	r3, [pc, #468]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b72      	ldr	r3, [pc, #456]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 0207 	bic.w	r2, r3, #7
 8004092:	4970      	ldr	r1, [pc, #448]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b6e      	ldr	r3, [pc, #440]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0cf      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	4b66      	ldr	r3, [pc, #408]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d908      	bls.n	80040da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4960      	ldr	r1, [pc, #384]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04c      	beq.n	8004180 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	4b5a      	ldr	r3, [pc, #360]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d121      	bne.n	800413e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0a6      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d115      	bne.n	800413e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e09a      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800411e:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e08e      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412e:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e086      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800413e:	4b46      	ldr	r3, [pc, #280]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4943      	ldr	r1, [pc, #268]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fd fb66 	bl	8001820 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fd fb62 	bl	8001820 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e06e      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 020c 	and.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	429a      	cmp	r2, r3
 800417e:	d1eb      	bne.n	8004158 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004198:	429a      	cmp	r2, r3
 800419a:	d208      	bcs.n	80041ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	492b      	ldr	r1, [pc, #172]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d210      	bcs.n	80041de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 0207 	bic.w	r2, r3, #7
 80041c4:	4923      	ldr	r1, [pc, #140]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041cc:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_RCC_ClockConfig+0x1ec>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e036      	b.n	800424c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4918      	ldr	r1, [pc, #96]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4910      	ldr	r1, [pc, #64]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800421c:	f000 f824 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	490b      	ldr	r1, [pc, #44]	; (800425c <HAL_RCC_ClockConfig+0x1f4>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 800423a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1fc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd fa9d 	bl	8001780 <HAL_InitTick>
 8004246:	4603      	mov	r3, r0
 8004248:	72fb      	strb	r3, [r7, #11]

  return status;
 800424a:	7afb      	ldrb	r3, [r7, #11]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40022000 	.word	0x40022000
 8004258:	40021000 	.word	0x40021000
 800425c:	0800624c 	.word	0x0800624c
 8004260:	20000008 	.word	0x20000008
 8004264:	2000000c 	.word	0x2000000c

08004268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004276:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x34>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d121      	bne.n	80042da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d11e      	bne.n	80042da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800429c:	4b34      	ldr	r3, [pc, #208]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042a8:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042b8:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042c4:	4a2b      	ldr	r2, [pc, #172]	; (8004374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d102      	bne.n	80042e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_GetSysClockFreq+0x110>)
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	e004      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <HAL_RCC_GetSysClockFreq+0x114>)
 80042ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d134      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042f6:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d003      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0xa6>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d003      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0xac>
 800430c:	e005      	b.n	800431a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCC_GetSysClockFreq+0x110>)
 8004310:	617b      	str	r3, [r7, #20]
      break;
 8004312:	e005      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_GetSysClockFreq+0x114>)
 8004316:	617b      	str	r3, [r7, #20]
      break;
 8004318:	e002      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	617b      	str	r3, [r7, #20]
      break;
 800431e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004320:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	3301      	adds	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	fb03 f202 	mul.w	r2, r3, r2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <HAL_RCC_GetSysClockFreq+0x108>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	0e5b      	lsrs	r3, r3, #25
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	3301      	adds	r3, #1
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004360:	69bb      	ldr	r3, [r7, #24]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3724      	adds	r7, #36	; 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	08006264 	.word	0x08006264
 8004378:	00f42400 	.word	0x00f42400
 800437c:	007a1200 	.word	0x007a1200

08004380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_RCC_GetHCLKFreq+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000008 	.word	0x20000008

08004398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800439c:	f7ff fff0 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4904      	ldr	r1, [pc, #16]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	0800625c 	.word	0x0800625c

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043c8:	f7ff ffda 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0adb      	lsrs	r3, r3, #11
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4904      	ldr	r1, [pc, #16]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	0800625c 	.word	0x0800625c

080043f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004408:	f7ff f9ee 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 800440c:	6178      	str	r0, [r7, #20]
 800440e:	e014      	b.n	800443a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	6593      	str	r3, [r2, #88]	; 0x58
 800441c:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004428:	f7ff f9de 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 800442c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004440:	d10b      	bne.n	800445a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d919      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2ba0      	cmp	r3, #160	; 0xa0
 800444c:	d902      	bls.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800444e:	2302      	movs	r3, #2
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e013      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004454:	2301      	movs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e010      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b80      	cmp	r3, #128	; 0x80
 800445e:	d902      	bls.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004460:	2303      	movs	r3, #3
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e00a      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d102      	bne.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800446c:	2302      	movs	r3, #2
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e004      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d101      	bne.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004478:	2301      	movs	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 0207 	bic.w	r2, r3, #7
 8004484:	4909      	ldr	r1, [pc, #36]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40022000 	.word	0x40022000

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b8:	2300      	movs	r3, #0
 80044ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044bc:	2300      	movs	r3, #0
 80044be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d041      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044d4:	d02a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044da:	d824      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044e0:	d008      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044e6:	d81e      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f0:	d010      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044f2:	e018      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044f4:	4b86      	ldr	r3, [pc, #536]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a85      	ldr	r2, [pc, #532]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004500:	e015      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fabb 	bl	8004a84 <RCCEx_PLLSAI1_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004512:	e00c      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fba6 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	74fb      	strb	r3, [r7, #19]
      break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004534:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004542:	4973      	ldr	r1, [pc, #460]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800454a:	e001      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d041      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004560:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004564:	d02a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004566:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800456a:	d824      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800456c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004570:	d008      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004576:	d81e      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800457c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004582:	e018      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004584:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a61      	ldr	r2, [pc, #388]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004590:	e015      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fa73 	bl	8004a84 <RCCEx_PLLSAI1_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045a2:	e00c      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3320      	adds	r3, #32
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fb5e 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d2:	494f      	ldr	r1, [pc, #316]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045da:	e001      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a0 	beq.w	800472e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045f2:	4b47      	ldr	r3, [pc, #284]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b41      	ldr	r3, [pc, #260]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	4a40      	ldr	r2, [pc, #256]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	6593      	str	r3, [r2, #88]	; 0x58
 8004614:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004624:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3a      	ldr	r2, [pc, #232]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004630:	f7fd f8f6 	bl	8001820 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004636:	e009      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fd f8f2 	bl	8001820 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	74fb      	strb	r3, [r7, #19]
        break;
 800464a:	e005      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d15c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800465e:	4b2c      	ldr	r3, [pc, #176]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01f      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	d019      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	4a20      	ldr	r2, [pc, #128]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046a8:	4a19      	ldr	r2, [pc, #100]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fd f8b1 	bl	8001820 <HAL_GetTick>
 80046be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	e00b      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fd f8ad 	bl	8001820 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d902      	bls.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	74fb      	strb	r3, [r7, #19]
            break;
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046da:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ec      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004706:	e009      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
 800470c:	e006      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471c:	7c7b      	ldrb	r3, [r7, #17]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b9e      	ldr	r3, [pc, #632]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	4a9d      	ldr	r2, [pc, #628]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800473a:	4b98      	ldr	r3, [pc, #608]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f023 0203 	bic.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	4994      	ldr	r1, [pc, #592]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800475c:	4b8f      	ldr	r3, [pc, #572]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 020c 	bic.w	r2, r3, #12
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	498c      	ldr	r1, [pc, #560]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800477e:	4b87      	ldr	r3, [pc, #540]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	4983      	ldr	r1, [pc, #524]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047a0:	4b7e      	ldr	r3, [pc, #504]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	497b      	ldr	r1, [pc, #492]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047c2:	4b76      	ldr	r3, [pc, #472]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d0:	4972      	ldr	r1, [pc, #456]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047e4:	4b6d      	ldr	r3, [pc, #436]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	496a      	ldr	r1, [pc, #424]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004806:	4b65      	ldr	r3, [pc, #404]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	4961      	ldr	r1, [pc, #388]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004828:	4b5c      	ldr	r3, [pc, #368]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004836:	4959      	ldr	r1, [pc, #356]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800484a:	4b54      	ldr	r3, [pc, #336]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	4950      	ldr	r1, [pc, #320]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800486c:	4b4b      	ldr	r3, [pc, #300]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	4948      	ldr	r1, [pc, #288]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800488e:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	493f      	ldr	r1, [pc, #252]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d028      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b0:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048be:	4937      	ldr	r1, [pc, #220]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ce:	d106      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a31      	ldr	r2, [pc, #196]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048da:	60d3      	str	r3, [r2, #12]
 80048dc:	e011      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e6:	d10c      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f8c8 	bl	8004a84 <RCCEx_PLLSAI1_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048fe:	7cfb      	ldrb	r3, [r7, #19]
 8004900:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d028      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800490e:	4b23      	ldr	r3, [pc, #140]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	491f      	ldr	r1, [pc, #124]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492c:	d106      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492e:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004938:	60d3      	str	r3, [r2, #12]
 800493a:	e011      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004944:	d10c      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f899 	bl	8004a84 <RCCEx_PLLSAI1_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02b      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497a:	4908      	ldr	r1, [pc, #32]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a02      	ldr	r2, [pc, #8]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004996:	60d3      	str	r3, [r2, #12]
 8004998:	e014      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2101      	movs	r1, #1
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f867 	bl	8004a84 <RCCEx_PLLSAI1_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02f      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d0:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049de:	4928      	ldr	r1, [pc, #160]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ee:	d10d      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f844 	bl	8004a84 <RCCEx_PLLSAI1_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d014      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	74bb      	strb	r3, [r7, #18]
 8004a0a:	e011      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3320      	adds	r3, #32
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f925 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a26:	7cfb      	ldrb	r3, [r7, #19]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4a:	490d      	ldr	r1, [pc, #52]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6e:	4904      	ldr	r1, [pc, #16]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a92:	4b75      	ldr	r3, [pc, #468]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d018      	beq.n	8004ad0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a9e:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d10d      	bne.n	8004aca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ab6:	4b6c      	ldr	r3, [pc, #432]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d047      	beq.n	8004b5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
 8004ace:	e044      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d018      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x86>
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d825      	bhi.n	8004b28 <RCCEx_PLLSAI1_Config+0xa4>
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d002      	beq.n	8004ae6 <RCCEx_PLLSAI1_Config+0x62>
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d009      	beq.n	8004af8 <RCCEx_PLLSAI1_Config+0x74>
 8004ae4:	e020      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae6:	4b60      	ldr	r3, [pc, #384]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11d      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af6:	e01a      	b.n	8004b2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af8:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d116      	bne.n	8004b32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b08:	e013      	b.n	8004b32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b0a:	4b57      	ldr	r3, [pc, #348]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b16:	4b54      	ldr	r3, [pc, #336]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b26:	e006      	b.n	8004b36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2c:	e004      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	430b      	orrs	r3, r1
 8004b54:	4944      	ldr	r1, [pc, #272]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d17d      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b60:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fc fe58 	bl	8001820 <HAL_GetTick>
 8004b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b72:	e009      	b.n	8004b88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b74:	f7fc fe54 	bl	8001820 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d902      	bls.n	8004b88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	73fb      	strb	r3, [r7, #15]
        break;
 8004b86:	e005      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b88:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ef      	bne.n	8004b74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d160      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d111      	bne.n	8004bc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba0:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6892      	ldr	r2, [r2, #8]
 8004bb0:	0211      	lsls	r1, r2, #8
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	0912      	lsrs	r2, r2, #4
 8004bb8:	0452      	lsls	r2, r2, #17
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	492a      	ldr	r1, [pc, #168]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	610b      	str	r3, [r1, #16]
 8004bc2:	e027      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d112      	bne.n	8004bf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bca:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6892      	ldr	r2, [r2, #8]
 8004bda:	0211      	lsls	r1, r2, #8
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6912      	ldr	r2, [r2, #16]
 8004be0:	0852      	lsrs	r2, r2, #1
 8004be2:	3a01      	subs	r2, #1
 8004be4:	0552      	lsls	r2, r2, #21
 8004be6:	430a      	orrs	r2, r1
 8004be8:	491f      	ldr	r1, [pc, #124]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]
 8004bee:	e011      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6892      	ldr	r2, [r2, #8]
 8004c00:	0211      	lsls	r1, r2, #8
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6952      	ldr	r2, [r2, #20]
 8004c06:	0852      	lsrs	r2, r2, #1
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0652      	lsls	r2, r2, #25
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	4916      	ldr	r1, [pc, #88]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fc fdfe 	bl	8001820 <HAL_GetTick>
 8004c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c26:	e009      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c28:	f7fc fdfa 	bl	8001820 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d902      	bls.n	8004c3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	73fb      	strb	r3, [r7, #15]
          break;
 8004c3a:	e005      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0ef      	beq.n	8004c28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	4904      	ldr	r1, [pc, #16]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000

08004c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c7a:	4b6a      	ldr	r3, [pc, #424]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c86:	4b67      	ldr	r3, [pc, #412]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0203 	and.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d10d      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
       ||
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c9e:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
       ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d047      	beq.n	8004d42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	e044      	b.n	8004d42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d018      	beq.n	8004cf2 <RCCEx_PLLSAI2_Config+0x86>
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d825      	bhi.n	8004d10 <RCCEx_PLLSAI2_Config+0xa4>
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <RCCEx_PLLSAI2_Config+0x62>
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d009      	beq.n	8004ce0 <RCCEx_PLLSAI2_Config+0x74>
 8004ccc:	e020      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cce:	4b55      	ldr	r3, [pc, #340]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d11d      	bne.n	8004d16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cde:	e01a      	b.n	8004d16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf0:	e013      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cf2:	4b4c      	ldr	r3, [pc, #304]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10f      	bne.n	8004d1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cfe:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d0e:	e006      	b.n	8004d1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e004      	b.n	8004d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	4939      	ldr	r1, [pc, #228]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d167      	bne.n	8004e18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d48:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a35      	ldr	r2, [pc, #212]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d54:	f7fc fd64 	bl	8001820 <HAL_GetTick>
 8004d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d5a:	e009      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d5c:	f7fc fd60 	bl	8001820 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d902      	bls.n	8004d70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d6e:	e005      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d70:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ef      	bne.n	8004d5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d14a      	bne.n	8004e18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d111      	bne.n	8004dac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6892      	ldr	r2, [r2, #8]
 8004d98:	0211      	lsls	r1, r2, #8
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68d2      	ldr	r2, [r2, #12]
 8004d9e:	0912      	lsrs	r2, r2, #4
 8004da0:	0452      	lsls	r2, r2, #17
 8004da2:	430a      	orrs	r2, r1
 8004da4:	491f      	ldr	r1, [pc, #124]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	614b      	str	r3, [r1, #20]
 8004daa:	e011      	b.n	8004dd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004db4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6892      	ldr	r2, [r2, #8]
 8004dbc:	0211      	lsls	r1, r2, #8
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6912      	ldr	r2, [r2, #16]
 8004dc2:	0852      	lsrs	r2, r2, #1
 8004dc4:	3a01      	subs	r2, #1
 8004dc6:	0652      	lsls	r2, r2, #25
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	4916      	ldr	r1, [pc, #88]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dd0:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fc fd20 	bl	8001820 <HAL_GetTick>
 8004de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004de2:	e009      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de4:	f7fc fd1c 	bl	8001820 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d902      	bls.n	8004df8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	73fb      	strb	r3, [r7, #15]
          break;
 8004df6:	e005      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ef      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4904      	ldr	r1, [pc, #16]	; (8004e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000

08004e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e040      	b.n	8004ebc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fb2c 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8c0 	bl	8004fec <UART_SetConfig>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e022      	b.n	8004ebc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fb6c 	bl	800555c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fbf3 	bl	80056a0 <UART_CheckIdleState>
 8004eba:	4603      	mov	r3, r0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 8082 	bne.w	8004fe2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_UART_Transmit+0x26>
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e07a      	b.n	8004fe4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Transmit+0x38>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e073      	b.n	8004fe4 <HAL_UART_Transmit+0x120>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2221      	movs	r2, #33	; 0x21
 8004f10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f12:	f7fc fc85 	bl	8001820 <HAL_GetTick>
 8004f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	d108      	bne.n	8004f44 <HAL_UART_Transmit+0x80>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e003      	b.n	8004f4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f54:	e02d      	b.n	8004fb2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fbe6 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e039      	b.n	8004fe4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10b      	bne.n	8004f8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	881a      	ldrh	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f82:	b292      	uxth	r2, r2
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3302      	adds	r3, #2
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e008      	b.n	8004fa0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b292      	uxth	r2, r2
 8004f98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1cb      	bne.n	8004f56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2140      	movs	r1, #64	; 0x40
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fbb2 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e005      	b.n	8004fe4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff0:	b08a      	sub	sp, #40	; 0x28
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	431a      	orrs	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	4313      	orrs	r3, r2
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4ba4      	ldr	r3, [pc, #656]	; (80052ac <UART_SetConfig+0x2c0>)
 800501c:	4013      	ands	r3, r2
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005024:	430b      	orrs	r3, r1
 8005026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a99      	ldr	r2, [pc, #612]	; (80052b0 <UART_SetConfig+0x2c4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	4313      	orrs	r3, r2
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a90      	ldr	r2, [pc, #576]	; (80052b4 <UART_SetConfig+0x2c8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d126      	bne.n	80050c4 <UART_SetConfig+0xd8>
 8005076:	4b90      	ldr	r3, [pc, #576]	; (80052b8 <UART_SetConfig+0x2cc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	2b03      	cmp	r3, #3
 8005082:	d81b      	bhi.n	80050bc <UART_SetConfig+0xd0>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0xa0>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050ad 	.word	0x080050ad
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b5 	.word	0x080050b5
 800509c:	2301      	movs	r3, #1
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e116      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80050a4:	2302      	movs	r3, #2
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e112      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80050ac:	2304      	movs	r3, #4
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e10e      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80050b4:	2308      	movs	r3, #8
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e10a      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e106      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <UART_SetConfig+0x2d0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d138      	bne.n	8005140 <UART_SetConfig+0x154>
 80050ce:	4b7a      	ldr	r3, [pc, #488]	; (80052b8 <UART_SetConfig+0x2cc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d82d      	bhi.n	8005138 <UART_SetConfig+0x14c>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0xf8>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005119 	.word	0x08005119
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005139 	.word	0x08005139
 80050f0:	08005139 	.word	0x08005139
 80050f4:	08005129 	.word	0x08005129
 80050f8:	08005139 	.word	0x08005139
 80050fc:	08005139 	.word	0x08005139
 8005100:	08005139 	.word	0x08005139
 8005104:	08005121 	.word	0x08005121
 8005108:	08005139 	.word	0x08005139
 800510c:	08005139 	.word	0x08005139
 8005110:	08005139 	.word	0x08005139
 8005114:	08005131 	.word	0x08005131
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e0d8      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e0d4      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e0d0      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e0cc      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e0c8      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5e      	ldr	r2, [pc, #376]	; (80052c0 <UART_SetConfig+0x2d4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d125      	bne.n	8005196 <UART_SetConfig+0x1aa>
 800514a:	4b5b      	ldr	r3, [pc, #364]	; (80052b8 <UART_SetConfig+0x2cc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d016      	beq.n	8005186 <UART_SetConfig+0x19a>
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d818      	bhi.n	800518e <UART_SetConfig+0x1a2>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d00a      	beq.n	8005176 <UART_SetConfig+0x18a>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d814      	bhi.n	800518e <UART_SetConfig+0x1a2>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <UART_SetConfig+0x182>
 8005168:	2b10      	cmp	r3, #16
 800516a:	d008      	beq.n	800517e <UART_SetConfig+0x192>
 800516c:	e00f      	b.n	800518e <UART_SetConfig+0x1a2>
 800516e:	2300      	movs	r3, #0
 8005170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005174:	e0ad      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005176:	2302      	movs	r3, #2
 8005178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517c:	e0a9      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800517e:	2304      	movs	r3, #4
 8005180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005184:	e0a5      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005186:	2308      	movs	r3, #8
 8005188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518c:	e0a1      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800518e:	2310      	movs	r3, #16
 8005190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005194:	e09d      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a4a      	ldr	r2, [pc, #296]	; (80052c4 <UART_SetConfig+0x2d8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d125      	bne.n	80051ec <UART_SetConfig+0x200>
 80051a0:	4b45      	ldr	r3, [pc, #276]	; (80052b8 <UART_SetConfig+0x2cc>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051aa:	2bc0      	cmp	r3, #192	; 0xc0
 80051ac:	d016      	beq.n	80051dc <UART_SetConfig+0x1f0>
 80051ae:	2bc0      	cmp	r3, #192	; 0xc0
 80051b0:	d818      	bhi.n	80051e4 <UART_SetConfig+0x1f8>
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d00a      	beq.n	80051cc <UART_SetConfig+0x1e0>
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	d814      	bhi.n	80051e4 <UART_SetConfig+0x1f8>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <UART_SetConfig+0x1d8>
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d008      	beq.n	80051d4 <UART_SetConfig+0x1e8>
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x1f8>
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e082      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e07e      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e07a      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e076      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	e072      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <UART_SetConfig+0x2dc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d12a      	bne.n	800524c <UART_SetConfig+0x260>
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <UART_SetConfig+0x2cc>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005204:	d01a      	beq.n	800523c <UART_SetConfig+0x250>
 8005206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520a:	d81b      	bhi.n	8005244 <UART_SetConfig+0x258>
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d00c      	beq.n	800522c <UART_SetConfig+0x240>
 8005212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005216:	d815      	bhi.n	8005244 <UART_SetConfig+0x258>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <UART_SetConfig+0x238>
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	d008      	beq.n	8005234 <UART_SetConfig+0x248>
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x258>
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e052      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e04e      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e04a      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e046      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e042      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <UART_SetConfig+0x2c4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d13a      	bne.n	80052cc <UART_SetConfig+0x2e0>
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005264:	d01a      	beq.n	800529c <UART_SetConfig+0x2b0>
 8005266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800526a:	d81b      	bhi.n	80052a4 <UART_SetConfig+0x2b8>
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	d00c      	beq.n	800528c <UART_SetConfig+0x2a0>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d815      	bhi.n	80052a4 <UART_SetConfig+0x2b8>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <UART_SetConfig+0x298>
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005280:	d008      	beq.n	8005294 <UART_SetConfig+0x2a8>
 8005282:	e00f      	b.n	80052a4 <UART_SetConfig+0x2b8>
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e022      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e01e      	b.n	80052d2 <UART_SetConfig+0x2e6>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e01a      	b.n	80052d2 <UART_SetConfig+0x2e6>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e016      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e012      	b.n	80052d2 <UART_SetConfig+0x2e6>
 80052ac:	efff69f3 	.word	0xefff69f3
 80052b0:	40008000 	.word	0x40008000
 80052b4:	40013800 	.word	0x40013800
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40004400 	.word	0x40004400
 80052c0:	40004800 	.word	0x40004800
 80052c4:	40004c00 	.word	0x40004c00
 80052c8:	40005000 	.word	0x40005000
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a9f      	ldr	r2, [pc, #636]	; (8005554 <UART_SetConfig+0x568>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d17a      	bne.n	80053d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d824      	bhi.n	800532e <UART_SetConfig+0x342>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0x300>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005311 	.word	0x08005311
 80052f0:	0800532f 	.word	0x0800532f
 80052f4:	08005319 	.word	0x08005319
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800531f 	.word	0x0800531f
 8005300:	0800532f 	.word	0x0800532f
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800532f 	.word	0x0800532f
 800530c:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7ff f842 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 8005314:	61f8      	str	r0, [r7, #28]
        break;
 8005316:	e010      	b.n	800533a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005318:	4b8f      	ldr	r3, [pc, #572]	; (8005558 <UART_SetConfig+0x56c>)
 800531a:	61fb      	str	r3, [r7, #28]
        break;
 800531c:	e00d      	b.n	800533a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531e:	f7fe ffa3 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8005322:	61f8      	str	r0, [r7, #28]
        break;
 8005324:	e009      	b.n	800533a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532a:	61fb      	str	r3, [r7, #28]
        break;
 800532c:	e005      	b.n	800533a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80fb 	beq.w	8005538 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4413      	add	r3, r2
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	429a      	cmp	r2, r3
 8005350:	d305      	bcc.n	800535e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	429a      	cmp	r2, r3
 800535c:	d903      	bls.n	8005366 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005364:	e0e8      	b.n	8005538 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2200      	movs	r2, #0
 800536a:	461c      	mov	r4, r3
 800536c:	4615      	mov	r5, r2
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	022b      	lsls	r3, r5, #8
 8005378:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800537c:	0222      	lsls	r2, r4, #8
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	6849      	ldr	r1, [r1, #4]
 8005382:	0849      	lsrs	r1, r1, #1
 8005384:	2000      	movs	r0, #0
 8005386:	4688      	mov	r8, r1
 8005388:	4681      	mov	r9, r0
 800538a:	eb12 0a08 	adds.w	sl, r2, r8
 800538e:	eb43 0b09 	adc.w	fp, r3, r9
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a0:	4650      	mov	r0, sl
 80053a2:	4659      	mov	r1, fp
 80053a4:	f7fb fb5a 	bl	8000a5c <__aeabi_uldivmod>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4613      	mov	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b6:	d308      	bcc.n	80053ca <UART_SetConfig+0x3de>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053be:	d204      	bcs.n	80053ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	e0b6      	b.n	8005538 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053d0:	e0b2      	b.n	8005538 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053da:	d15e      	bne.n	800549a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d828      	bhi.n	8005436 <UART_SetConfig+0x44a>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x400>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005419 	.word	0x08005419
 80053f4:	08005421 	.word	0x08005421
 80053f8:	08005437 	.word	0x08005437
 80053fc:	08005427 	.word	0x08005427
 8005400:	08005437 	.word	0x08005437
 8005404:	08005437 	.word	0x08005437
 8005408:	08005437 	.word	0x08005437
 800540c:	0800542f 	.word	0x0800542f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005410:	f7fe ffc2 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 8005414:	61f8      	str	r0, [r7, #28]
        break;
 8005416:	e014      	b.n	8005442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005418:	f7fe ffd4 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 800541c:	61f8      	str	r0, [r7, #28]
        break;
 800541e:	e010      	b.n	8005442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005420:	4b4d      	ldr	r3, [pc, #308]	; (8005558 <UART_SetConfig+0x56c>)
 8005422:	61fb      	str	r3, [r7, #28]
        break;
 8005424:	e00d      	b.n	8005442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005426:	f7fe ff1f 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 800542a:	61f8      	str	r0, [r7, #28]
        break;
 800542c:	e009      	b.n	8005442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005432:	61fb      	str	r3, [r7, #28]
        break;
 8005434:	e005      	b.n	8005442 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d077      	beq.n	8005538 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	005a      	lsls	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	441a      	add	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b0f      	cmp	r3, #15
 8005462:	d916      	bls.n	8005492 <UART_SetConfig+0x4a6>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546a:	d212      	bcs.n	8005492 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f023 030f 	bic.w	r3, r3, #15
 8005474:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	b29b      	uxth	r3, r3
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	b29a      	uxth	r2, r3
 8005482:	8afb      	ldrh	r3, [r7, #22]
 8005484:	4313      	orrs	r3, r2
 8005486:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	8afa      	ldrh	r2, [r7, #22]
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	e052      	b.n	8005538 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005498:	e04e      	b.n	8005538 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800549a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d827      	bhi.n	80054f2 <UART_SetConfig+0x506>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x4bc>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	080054f3 	.word	0x080054f3
 80054b8:	080054e3 	.word	0x080054e3
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054f3 	.word	0x080054f3
 80054c4:	080054f3 	.word	0x080054f3
 80054c8:	080054eb 	.word	0x080054eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fe ff64 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 80054d0:	61f8      	str	r0, [r7, #28]
        break;
 80054d2:	e014      	b.n	80054fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7fe ff76 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 80054d8:	61f8      	str	r0, [r7, #28]
        break;
 80054da:	e010      	b.n	80054fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054dc:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <UART_SetConfig+0x56c>)
 80054de:	61fb      	str	r3, [r7, #28]
        break;
 80054e0:	e00d      	b.n	80054fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fe fec1 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 80054e6:	61f8      	str	r0, [r7, #28]
        break;
 80054e8:	e009      	b.n	80054fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ee:	61fb      	str	r3, [r7, #28]
        break;
 80054f0:	e005      	b.n	80054fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054fc:	bf00      	nop
    }

    if (pclk != 0U)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d019      	beq.n	8005538 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	085a      	lsrs	r2, r3, #1
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	441a      	add	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d909      	bls.n	8005532 <UART_SetConfig+0x546>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005524:	d205      	bcs.n	8005532 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e002      	b.n	8005538 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005544:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005552:	bf00      	nop
 8005554:	40008000 	.word	0x40008000
 8005558:	00f42400 	.word	0x00f42400

0800555c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01a      	beq.n	8005672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565a:	d10a      	bne.n	8005672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b0:	f7fc f8b6 	bl	8001820 <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d10e      	bne.n	80056e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f82d 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e023      	b.n	800572a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d10e      	bne.n	800570e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f817 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e00d      	b.n	800572a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b09c      	sub	sp, #112	; 0x70
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	e0a5      	b.n	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	f000 80a1 	beq.w	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fc f867 	bl	8001820 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <UART_WaitOnFlagUntilTimeout+0x32>
 800575e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005760:	2b00      	cmp	r3, #0
 8005762:	d13e      	bne.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005778:	667b      	str	r3, [r7, #100]	; 0x64
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005784:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	663b      	str	r3, [r7, #96]	; 0x60
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e067      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d04f      	beq.n	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fe:	d147      	bne.n	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005808:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800581e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800582e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e6      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	613b      	str	r3, [r7, #16]
   return(result);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	66bb      	str	r3, [r7, #104]	; 0x68
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800585c:	623a      	str	r2, [r7, #32]
 800585e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	61bb      	str	r3, [r7, #24]
   return(result);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e010      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	f43f af4a 	beq.w	8005744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3770      	adds	r7, #112	; 0x70
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <__errno>:
 80058bc:	4b01      	ldr	r3, [pc, #4]	; (80058c4 <__errno+0x8>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000014 	.word	0x20000014

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4d0d      	ldr	r5, [pc, #52]	; (8005900 <__libc_init_array+0x38>)
 80058cc:	4c0d      	ldr	r4, [pc, #52]	; (8005904 <__libc_init_array+0x3c>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	2600      	movs	r6, #0
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	4d0b      	ldr	r5, [pc, #44]	; (8005908 <__libc_init_array+0x40>)
 80058da:	4c0c      	ldr	r4, [pc, #48]	; (800590c <__libc_init_array+0x44>)
 80058dc:	f000 fc8e 	bl	80061fc <_init>
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	2600      	movs	r6, #0
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	080062d0 	.word	0x080062d0
 8005904:	080062d0 	.word	0x080062d0
 8005908:	080062d0 	.word	0x080062d0
 800590c:	080062d4 	.word	0x080062d4

08005910 <memset>:
 8005910:	4402      	add	r2, r0
 8005912:	4603      	mov	r3, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <siprintf>:
 8005920:	b40e      	push	{r1, r2, r3}
 8005922:	b500      	push	{lr}
 8005924:	b09c      	sub	sp, #112	; 0x70
 8005926:	ab1d      	add	r3, sp, #116	; 0x74
 8005928:	9002      	str	r0, [sp, #8]
 800592a:	9006      	str	r0, [sp, #24]
 800592c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005930:	4809      	ldr	r0, [pc, #36]	; (8005958 <siprintf+0x38>)
 8005932:	9107      	str	r1, [sp, #28]
 8005934:	9104      	str	r1, [sp, #16]
 8005936:	4909      	ldr	r1, [pc, #36]	; (800595c <siprintf+0x3c>)
 8005938:	f853 2b04 	ldr.w	r2, [r3], #4
 800593c:	9105      	str	r1, [sp, #20]
 800593e:	6800      	ldr	r0, [r0, #0]
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	a902      	add	r1, sp, #8
 8005944:	f000 f868 	bl	8005a18 <_svfiprintf_r>
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	b01c      	add	sp, #112	; 0x70
 8005950:	f85d eb04 	ldr.w	lr, [sp], #4
 8005954:	b003      	add	sp, #12
 8005956:	4770      	bx	lr
 8005958:	20000014 	.word	0x20000014
 800595c:	ffff0208 	.word	0xffff0208

08005960 <__ssputs_r>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	688e      	ldr	r6, [r1, #8]
 8005966:	429e      	cmp	r6, r3
 8005968:	4682      	mov	sl, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4690      	mov	r8, r2
 800596e:	461f      	mov	r7, r3
 8005970:	d838      	bhi.n	80059e4 <__ssputs_r+0x84>
 8005972:	898a      	ldrh	r2, [r1, #12]
 8005974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005978:	d032      	beq.n	80059e0 <__ssputs_r+0x80>
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	6909      	ldr	r1, [r1, #16]
 800597e:	eba5 0901 	sub.w	r9, r5, r1
 8005982:	6965      	ldr	r5, [r4, #20]
 8005984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800598c:	3301      	adds	r3, #1
 800598e:	444b      	add	r3, r9
 8005990:	106d      	asrs	r5, r5, #1
 8005992:	429d      	cmp	r5, r3
 8005994:	bf38      	it	cc
 8005996:	461d      	movcc	r5, r3
 8005998:	0553      	lsls	r3, r2, #21
 800599a:	d531      	bpl.n	8005a00 <__ssputs_r+0xa0>
 800599c:	4629      	mov	r1, r5
 800599e:	f000 fb63 	bl	8006068 <_malloc_r>
 80059a2:	4606      	mov	r6, r0
 80059a4:	b950      	cbnz	r0, 80059bc <__ssputs_r+0x5c>
 80059a6:	230c      	movs	r3, #12
 80059a8:	f8ca 3000 	str.w	r3, [sl]
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059bc:	6921      	ldr	r1, [r4, #16]
 80059be:	464a      	mov	r2, r9
 80059c0:	f000 fabe 	bl	8005f40 <memcpy>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	6126      	str	r6, [r4, #16]
 80059d2:	6165      	str	r5, [r4, #20]
 80059d4:	444e      	add	r6, r9
 80059d6:	eba5 0509 	sub.w	r5, r5, r9
 80059da:	6026      	str	r6, [r4, #0]
 80059dc:	60a5      	str	r5, [r4, #8]
 80059de:	463e      	mov	r6, r7
 80059e0:	42be      	cmp	r6, r7
 80059e2:	d900      	bls.n	80059e6 <__ssputs_r+0x86>
 80059e4:	463e      	mov	r6, r7
 80059e6:	6820      	ldr	r0, [r4, #0]
 80059e8:	4632      	mov	r2, r6
 80059ea:	4641      	mov	r1, r8
 80059ec:	f000 fab6 	bl	8005f5c <memmove>
 80059f0:	68a3      	ldr	r3, [r4, #8]
 80059f2:	1b9b      	subs	r3, r3, r6
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	4433      	add	r3, r6
 80059fa:	6023      	str	r3, [r4, #0]
 80059fc:	2000      	movs	r0, #0
 80059fe:	e7db      	b.n	80059b8 <__ssputs_r+0x58>
 8005a00:	462a      	mov	r2, r5
 8005a02:	f000 fba5 	bl	8006150 <_realloc_r>
 8005a06:	4606      	mov	r6, r0
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1e1      	bne.n	80059d0 <__ssputs_r+0x70>
 8005a0c:	6921      	ldr	r1, [r4, #16]
 8005a0e:	4650      	mov	r0, sl
 8005a10:	f000 fabe 	bl	8005f90 <_free_r>
 8005a14:	e7c7      	b.n	80059a6 <__ssputs_r+0x46>
	...

08005a18 <_svfiprintf_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	4698      	mov	r8, r3
 8005a1e:	898b      	ldrh	r3, [r1, #12]
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	b09d      	sub	sp, #116	; 0x74
 8005a24:	4607      	mov	r7, r0
 8005a26:	460d      	mov	r5, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	d50e      	bpl.n	8005a4a <_svfiprintf_r+0x32>
 8005a2c:	690b      	ldr	r3, [r1, #16]
 8005a2e:	b963      	cbnz	r3, 8005a4a <_svfiprintf_r+0x32>
 8005a30:	2140      	movs	r1, #64	; 0x40
 8005a32:	f000 fb19 	bl	8006068 <_malloc_r>
 8005a36:	6028      	str	r0, [r5, #0]
 8005a38:	6128      	str	r0, [r5, #16]
 8005a3a:	b920      	cbnz	r0, 8005a46 <_svfiprintf_r+0x2e>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	e0d1      	b.n	8005bea <_svfiprintf_r+0x1d2>
 8005a46:	2340      	movs	r3, #64	; 0x40
 8005a48:	616b      	str	r3, [r5, #20]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4e:	2320      	movs	r3, #32
 8005a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a58:	2330      	movs	r3, #48	; 0x30
 8005a5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c04 <_svfiprintf_r+0x1ec>
 8005a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a62:	f04f 0901 	mov.w	r9, #1
 8005a66:	4623      	mov	r3, r4
 8005a68:	469a      	mov	sl, r3
 8005a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a6e:	b10a      	cbz	r2, 8005a74 <_svfiprintf_r+0x5c>
 8005a70:	2a25      	cmp	r2, #37	; 0x25
 8005a72:	d1f9      	bne.n	8005a68 <_svfiprintf_r+0x50>
 8005a74:	ebba 0b04 	subs.w	fp, sl, r4
 8005a78:	d00b      	beq.n	8005a92 <_svfiprintf_r+0x7a>
 8005a7a:	465b      	mov	r3, fp
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	4638      	mov	r0, r7
 8005a82:	f7ff ff6d 	bl	8005960 <__ssputs_r>
 8005a86:	3001      	adds	r0, #1
 8005a88:	f000 80aa 	beq.w	8005be0 <_svfiprintf_r+0x1c8>
 8005a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8e:	445a      	add	r2, fp
 8005a90:	9209      	str	r2, [sp, #36]	; 0x24
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80a2 	beq.w	8005be0 <_svfiprintf_r+0x1c8>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa6:	f10a 0a01 	add.w	sl, sl, #1
 8005aaa:	9304      	str	r3, [sp, #16]
 8005aac:	9307      	str	r3, [sp, #28]
 8005aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab4:	4654      	mov	r4, sl
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005abc:	4851      	ldr	r0, [pc, #324]	; (8005c04 <_svfiprintf_r+0x1ec>)
 8005abe:	f7fa fb87 	bl	80001d0 <memchr>
 8005ac2:	9a04      	ldr	r2, [sp, #16]
 8005ac4:	b9d8      	cbnz	r0, 8005afe <_svfiprintf_r+0xe6>
 8005ac6:	06d0      	lsls	r0, r2, #27
 8005ac8:	bf44      	itt	mi
 8005aca:	2320      	movmi	r3, #32
 8005acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad0:	0711      	lsls	r1, r2, #28
 8005ad2:	bf44      	itt	mi
 8005ad4:	232b      	movmi	r3, #43	; 0x2b
 8005ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ada:	f89a 3000 	ldrb.w	r3, [sl]
 8005ade:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae0:	d015      	beq.n	8005b0e <_svfiprintf_r+0xf6>
 8005ae2:	9a07      	ldr	r2, [sp, #28]
 8005ae4:	4654      	mov	r4, sl
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f04f 0c0a 	mov.w	ip, #10
 8005aec:	4621      	mov	r1, r4
 8005aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005af2:	3b30      	subs	r3, #48	; 0x30
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d94e      	bls.n	8005b96 <_svfiprintf_r+0x17e>
 8005af8:	b1b0      	cbz	r0, 8005b28 <_svfiprintf_r+0x110>
 8005afa:	9207      	str	r2, [sp, #28]
 8005afc:	e014      	b.n	8005b28 <_svfiprintf_r+0x110>
 8005afe:	eba0 0308 	sub.w	r3, r0, r8
 8005b02:	fa09 f303 	lsl.w	r3, r9, r3
 8005b06:	4313      	orrs	r3, r2
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	46a2      	mov	sl, r4
 8005b0c:	e7d2      	b.n	8005ab4 <_svfiprintf_r+0x9c>
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	1d19      	adds	r1, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	9103      	str	r1, [sp, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfbb      	ittet	lt
 8005b1a:	425b      	neglt	r3, r3
 8005b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b20:	9307      	strge	r3, [sp, #28]
 8005b22:	9307      	strlt	r3, [sp, #28]
 8005b24:	bfb8      	it	lt
 8005b26:	9204      	strlt	r2, [sp, #16]
 8005b28:	7823      	ldrb	r3, [r4, #0]
 8005b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b2c:	d10c      	bne.n	8005b48 <_svfiprintf_r+0x130>
 8005b2e:	7863      	ldrb	r3, [r4, #1]
 8005b30:	2b2a      	cmp	r3, #42	; 0x2a
 8005b32:	d135      	bne.n	8005ba0 <_svfiprintf_r+0x188>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	9203      	str	r2, [sp, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bfb8      	it	lt
 8005b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b44:	3402      	adds	r4, #2
 8005b46:	9305      	str	r3, [sp, #20]
 8005b48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c14 <_svfiprintf_r+0x1fc>
 8005b4c:	7821      	ldrb	r1, [r4, #0]
 8005b4e:	2203      	movs	r2, #3
 8005b50:	4650      	mov	r0, sl
 8005b52:	f7fa fb3d 	bl	80001d0 <memchr>
 8005b56:	b140      	cbz	r0, 8005b6a <_svfiprintf_r+0x152>
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	eba0 000a 	sub.w	r0, r0, sl
 8005b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	4303      	orrs	r3, r0
 8005b66:	3401      	adds	r4, #1
 8005b68:	9304      	str	r3, [sp, #16]
 8005b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6e:	4826      	ldr	r0, [pc, #152]	; (8005c08 <_svfiprintf_r+0x1f0>)
 8005b70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b74:	2206      	movs	r2, #6
 8005b76:	f7fa fb2b 	bl	80001d0 <memchr>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d038      	beq.n	8005bf0 <_svfiprintf_r+0x1d8>
 8005b7e:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <_svfiprintf_r+0x1f4>)
 8005b80:	bb1b      	cbnz	r3, 8005bca <_svfiprintf_r+0x1b2>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	3307      	adds	r3, #7
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	9303      	str	r3, [sp, #12]
 8005b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b90:	4433      	add	r3, r6
 8005b92:	9309      	str	r3, [sp, #36]	; 0x24
 8005b94:	e767      	b.n	8005a66 <_svfiprintf_r+0x4e>
 8005b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	e7a5      	b.n	8005aec <_svfiprintf_r+0xd4>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f04f 0c0a 	mov.w	ip, #10
 8005bac:	4620      	mov	r0, r4
 8005bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bb2:	3a30      	subs	r2, #48	; 0x30
 8005bb4:	2a09      	cmp	r2, #9
 8005bb6:	d903      	bls.n	8005bc0 <_svfiprintf_r+0x1a8>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0c5      	beq.n	8005b48 <_svfiprintf_r+0x130>
 8005bbc:	9105      	str	r1, [sp, #20]
 8005bbe:	e7c3      	b.n	8005b48 <_svfiprintf_r+0x130>
 8005bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e7f0      	b.n	8005bac <_svfiprintf_r+0x194>
 8005bca:	ab03      	add	r3, sp, #12
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	462a      	mov	r2, r5
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <_svfiprintf_r+0x1f8>)
 8005bd2:	a904      	add	r1, sp, #16
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f3af 8000 	nop.w
 8005bda:	1c42      	adds	r2, r0, #1
 8005bdc:	4606      	mov	r6, r0
 8005bde:	d1d6      	bne.n	8005b8e <_svfiprintf_r+0x176>
 8005be0:	89ab      	ldrh	r3, [r5, #12]
 8005be2:	065b      	lsls	r3, r3, #25
 8005be4:	f53f af2c 	bmi.w	8005a40 <_svfiprintf_r+0x28>
 8005be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bea:	b01d      	add	sp, #116	; 0x74
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	ab03      	add	r3, sp, #12
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <_svfiprintf_r+0x1f8>)
 8005bf8:	a904      	add	r1, sp, #16
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f000 f87a 	bl	8005cf4 <_printf_i>
 8005c00:	e7eb      	b.n	8005bda <_svfiprintf_r+0x1c2>
 8005c02:	bf00      	nop
 8005c04:	08006294 	.word	0x08006294
 8005c08:	0800629e 	.word	0x0800629e
 8005c0c:	00000000 	.word	0x00000000
 8005c10:	08005961 	.word	0x08005961
 8005c14:	0800629a 	.word	0x0800629a

08005c18 <_printf_common>:
 8005c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	4616      	mov	r6, r2
 8005c1e:	4699      	mov	r9, r3
 8005c20:	688a      	ldr	r2, [r1, #8]
 8005c22:	690b      	ldr	r3, [r1, #16]
 8005c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	bfb8      	it	lt
 8005c2c:	4613      	movlt	r3, r2
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c34:	4607      	mov	r7, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b10a      	cbz	r2, 8005c3e <_printf_common+0x26>
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	0699      	lsls	r1, r3, #26
 8005c42:	bf42      	ittt	mi
 8005c44:	6833      	ldrmi	r3, [r6, #0]
 8005c46:	3302      	addmi	r3, #2
 8005c48:	6033      	strmi	r3, [r6, #0]
 8005c4a:	6825      	ldr	r5, [r4, #0]
 8005c4c:	f015 0506 	ands.w	r5, r5, #6
 8005c50:	d106      	bne.n	8005c60 <_printf_common+0x48>
 8005c52:	f104 0a19 	add.w	sl, r4, #25
 8005c56:	68e3      	ldr	r3, [r4, #12]
 8005c58:	6832      	ldr	r2, [r6, #0]
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	42ab      	cmp	r3, r5
 8005c5e:	dc26      	bgt.n	8005cae <_printf_common+0x96>
 8005c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c64:	1e13      	subs	r3, r2, #0
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	0692      	lsls	r2, r2, #26
 8005c6e:	d42b      	bmi.n	8005cc8 <_printf_common+0xb0>
 8005c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c74:	4649      	mov	r1, r9
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d01e      	beq.n	8005cbc <_printf_common+0xa4>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	68e5      	ldr	r5, [r4, #12]
 8005c82:	6832      	ldr	r2, [r6, #0]
 8005c84:	f003 0306 	and.w	r3, r3, #6
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	bf08      	it	eq
 8005c8c:	1aad      	subeq	r5, r5, r2
 8005c8e:	68a3      	ldr	r3, [r4, #8]
 8005c90:	6922      	ldr	r2, [r4, #16]
 8005c92:	bf0c      	ite	eq
 8005c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c98:	2500      	movne	r5, #0
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	bfc4      	itt	gt
 8005c9e:	1a9b      	subgt	r3, r3, r2
 8005ca0:	18ed      	addgt	r5, r5, r3
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	341a      	adds	r4, #26
 8005ca6:	42b5      	cmp	r5, r6
 8005ca8:	d11a      	bne.n	8005ce0 <_printf_common+0xc8>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e008      	b.n	8005cc0 <_printf_common+0xa8>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	47c0      	blx	r8
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d103      	bne.n	8005cc4 <_printf_common+0xac>
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	e7c6      	b.n	8005c56 <_printf_common+0x3e>
 8005cc8:	18e1      	adds	r1, r4, r3
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	2030      	movs	r0, #48	; 0x30
 8005cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cd2:	4422      	add	r2, r4
 8005cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cdc:	3302      	adds	r3, #2
 8005cde:	e7c7      	b.n	8005c70 <_printf_common+0x58>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d0e6      	beq.n	8005cbc <_printf_common+0xa4>
 8005cee:	3601      	adds	r6, #1
 8005cf0:	e7d9      	b.n	8005ca6 <_printf_common+0x8e>
	...

08005cf4 <_printf_i>:
 8005cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf8:	7e0f      	ldrb	r7, [r1, #24]
 8005cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cfc:	2f78      	cmp	r7, #120	; 0x78
 8005cfe:	4691      	mov	r9, r2
 8005d00:	4680      	mov	r8, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	469a      	mov	sl, r3
 8005d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d0a:	d807      	bhi.n	8005d1c <_printf_i+0x28>
 8005d0c:	2f62      	cmp	r7, #98	; 0x62
 8005d0e:	d80a      	bhi.n	8005d26 <_printf_i+0x32>
 8005d10:	2f00      	cmp	r7, #0
 8005d12:	f000 80d8 	beq.w	8005ec6 <_printf_i+0x1d2>
 8005d16:	2f58      	cmp	r7, #88	; 0x58
 8005d18:	f000 80a3 	beq.w	8005e62 <_printf_i+0x16e>
 8005d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d24:	e03a      	b.n	8005d9c <_printf_i+0xa8>
 8005d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d2a:	2b15      	cmp	r3, #21
 8005d2c:	d8f6      	bhi.n	8005d1c <_printf_i+0x28>
 8005d2e:	a101      	add	r1, pc, #4	; (adr r1, 8005d34 <_printf_i+0x40>)
 8005d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d34:	08005d8d 	.word	0x08005d8d
 8005d38:	08005da1 	.word	0x08005da1
 8005d3c:	08005d1d 	.word	0x08005d1d
 8005d40:	08005d1d 	.word	0x08005d1d
 8005d44:	08005d1d 	.word	0x08005d1d
 8005d48:	08005d1d 	.word	0x08005d1d
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005d1d 	.word	0x08005d1d
 8005d54:	08005d1d 	.word	0x08005d1d
 8005d58:	08005d1d 	.word	0x08005d1d
 8005d5c:	08005d1d 	.word	0x08005d1d
 8005d60:	08005ead 	.word	0x08005ead
 8005d64:	08005dd1 	.word	0x08005dd1
 8005d68:	08005e8f 	.word	0x08005e8f
 8005d6c:	08005d1d 	.word	0x08005d1d
 8005d70:	08005d1d 	.word	0x08005d1d
 8005d74:	08005ecf 	.word	0x08005ecf
 8005d78:	08005d1d 	.word	0x08005d1d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d1d 	.word	0x08005d1d
 8005d84:	08005d1d 	.word	0x08005d1d
 8005d88:	08005e97 	.word	0x08005e97
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	1d1a      	adds	r2, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	602a      	str	r2, [r5, #0]
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0a3      	b.n	8005ee8 <_printf_i+0x1f4>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	6829      	ldr	r1, [r5, #0]
 8005da4:	0606      	lsls	r6, r0, #24
 8005da6:	f101 0304 	add.w	r3, r1, #4
 8005daa:	d50a      	bpl.n	8005dc2 <_printf_i+0xce>
 8005dac:	680e      	ldr	r6, [r1, #0]
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	da03      	bge.n	8005dbc <_printf_i+0xc8>
 8005db4:	232d      	movs	r3, #45	; 0x2d
 8005db6:	4276      	negs	r6, r6
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbc:	485e      	ldr	r0, [pc, #376]	; (8005f38 <_printf_i+0x244>)
 8005dbe:	230a      	movs	r3, #10
 8005dc0:	e019      	b.n	8005df6 <_printf_i+0x102>
 8005dc2:	680e      	ldr	r6, [r1, #0]
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dca:	bf18      	it	ne
 8005dcc:	b236      	sxthne	r6, r6
 8005dce:	e7ef      	b.n	8005db0 <_printf_i+0xbc>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	6029      	str	r1, [r5, #0]
 8005dd8:	0601      	lsls	r1, r0, #24
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0xec>
 8005ddc:	681e      	ldr	r6, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <_printf_i+0xf2>
 8005de0:	0646      	lsls	r6, r0, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0xe8>
 8005de4:	881e      	ldrh	r6, [r3, #0]
 8005de6:	4854      	ldr	r0, [pc, #336]	; (8005f38 <_printf_i+0x244>)
 8005de8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dea:	bf0c      	ite	eq
 8005dec:	2308      	moveq	r3, #8
 8005dee:	230a      	movne	r3, #10
 8005df0:	2100      	movs	r1, #0
 8005df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005df6:	6865      	ldr	r5, [r4, #4]
 8005df8:	60a5      	str	r5, [r4, #8]
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	bfa2      	ittt	ge
 8005dfe:	6821      	ldrge	r1, [r4, #0]
 8005e00:	f021 0104 	bicge.w	r1, r1, #4
 8005e04:	6021      	strge	r1, [r4, #0]
 8005e06:	b90e      	cbnz	r6, 8005e0c <_printf_i+0x118>
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	d04d      	beq.n	8005ea8 <_printf_i+0x1b4>
 8005e0c:	4615      	mov	r5, r2
 8005e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e12:	fb03 6711 	mls	r7, r3, r1, r6
 8005e16:	5dc7      	ldrb	r7, [r0, r7]
 8005e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e1c:	4637      	mov	r7, r6
 8005e1e:	42bb      	cmp	r3, r7
 8005e20:	460e      	mov	r6, r1
 8005e22:	d9f4      	bls.n	8005e0e <_printf_i+0x11a>
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d10b      	bne.n	8005e40 <_printf_i+0x14c>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	07de      	lsls	r6, r3, #31
 8005e2c:	d508      	bpl.n	8005e40 <_printf_i+0x14c>
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	4299      	cmp	r1, r3
 8005e34:	bfde      	ittt	le
 8005e36:	2330      	movle	r3, #48	; 0x30
 8005e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e40:	1b52      	subs	r2, r2, r5
 8005e42:	6122      	str	r2, [r4, #16]
 8005e44:	f8cd a000 	str.w	sl, [sp]
 8005e48:	464b      	mov	r3, r9
 8005e4a:	aa03      	add	r2, sp, #12
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f7ff fee2 	bl	8005c18 <_printf_common>
 8005e54:	3001      	adds	r0, #1
 8005e56:	d14c      	bne.n	8005ef2 <_printf_i+0x1fe>
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	b004      	add	sp, #16
 8005e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e62:	4835      	ldr	r0, [pc, #212]	; (8005f38 <_printf_i+0x244>)
 8005e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e68:	6829      	ldr	r1, [r5, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e70:	6029      	str	r1, [r5, #0]
 8005e72:	061d      	lsls	r5, r3, #24
 8005e74:	d514      	bpl.n	8005ea0 <_printf_i+0x1ac>
 8005e76:	07df      	lsls	r7, r3, #31
 8005e78:	bf44      	itt	mi
 8005e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7e:	6023      	strmi	r3, [r4, #0]
 8005e80:	b91e      	cbnz	r6, 8005e8a <_printf_i+0x196>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f023 0320 	bic.w	r3, r3, #32
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	2310      	movs	r3, #16
 8005e8c:	e7b0      	b.n	8005df0 <_printf_i+0xfc>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	f043 0320 	orr.w	r3, r3, #32
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	2378      	movs	r3, #120	; 0x78
 8005e98:	4828      	ldr	r0, [pc, #160]	; (8005f3c <_printf_i+0x248>)
 8005e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e9e:	e7e3      	b.n	8005e68 <_printf_i+0x174>
 8005ea0:	0659      	lsls	r1, r3, #25
 8005ea2:	bf48      	it	mi
 8005ea4:	b2b6      	uxthmi	r6, r6
 8005ea6:	e7e6      	b.n	8005e76 <_printf_i+0x182>
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	e7bb      	b.n	8005e24 <_printf_i+0x130>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	6826      	ldr	r6, [r4, #0]
 8005eb0:	6961      	ldr	r1, [r4, #20]
 8005eb2:	1d18      	adds	r0, r3, #4
 8005eb4:	6028      	str	r0, [r5, #0]
 8005eb6:	0635      	lsls	r5, r6, #24
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	d501      	bpl.n	8005ec0 <_printf_i+0x1cc>
 8005ebc:	6019      	str	r1, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <_printf_i+0x1d2>
 8005ec0:	0670      	lsls	r0, r6, #25
 8005ec2:	d5fb      	bpl.n	8005ebc <_printf_i+0x1c8>
 8005ec4:	8019      	strh	r1, [r3, #0]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	4615      	mov	r5, r2
 8005ecc:	e7ba      	b.n	8005e44 <_printf_i+0x150>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	1d1a      	adds	r2, r3, #4
 8005ed2:	602a      	str	r2, [r5, #0]
 8005ed4:	681d      	ldr	r5, [r3, #0]
 8005ed6:	6862      	ldr	r2, [r4, #4]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7fa f978 	bl	80001d0 <memchr>
 8005ee0:	b108      	cbz	r0, 8005ee6 <_printf_i+0x1f2>
 8005ee2:	1b40      	subs	r0, r0, r5
 8005ee4:	6060      	str	r0, [r4, #4]
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	6123      	str	r3, [r4, #16]
 8005eea:	2300      	movs	r3, #0
 8005eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef0:	e7a8      	b.n	8005e44 <_printf_i+0x150>
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	462a      	mov	r2, r5
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	47d0      	blx	sl
 8005efc:	3001      	adds	r0, #1
 8005efe:	d0ab      	beq.n	8005e58 <_printf_i+0x164>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	079b      	lsls	r3, r3, #30
 8005f04:	d413      	bmi.n	8005f2e <_printf_i+0x23a>
 8005f06:	68e0      	ldr	r0, [r4, #12]
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	4298      	cmp	r0, r3
 8005f0c:	bfb8      	it	lt
 8005f0e:	4618      	movlt	r0, r3
 8005f10:	e7a4      	b.n	8005e5c <_printf_i+0x168>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4632      	mov	r2, r6
 8005f16:	4649      	mov	r1, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	47d0      	blx	sl
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d09b      	beq.n	8005e58 <_printf_i+0x164>
 8005f20:	3501      	adds	r5, #1
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	9903      	ldr	r1, [sp, #12]
 8005f26:	1a5b      	subs	r3, r3, r1
 8005f28:	42ab      	cmp	r3, r5
 8005f2a:	dcf2      	bgt.n	8005f12 <_printf_i+0x21e>
 8005f2c:	e7eb      	b.n	8005f06 <_printf_i+0x212>
 8005f2e:	2500      	movs	r5, #0
 8005f30:	f104 0619 	add.w	r6, r4, #25
 8005f34:	e7f5      	b.n	8005f22 <_printf_i+0x22e>
 8005f36:	bf00      	nop
 8005f38:	080062a5 	.word	0x080062a5
 8005f3c:	080062b6 	.word	0x080062b6

08005f40 <memcpy>:
 8005f40:	440a      	add	r2, r1
 8005f42:	4291      	cmp	r1, r2
 8005f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f48:	d100      	bne.n	8005f4c <memcpy+0xc>
 8005f4a:	4770      	bx	lr
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f56:	4291      	cmp	r1, r2
 8005f58:	d1f9      	bne.n	8005f4e <memcpy+0xe>
 8005f5a:	bd10      	pop	{r4, pc}

08005f5c <memmove>:
 8005f5c:	4288      	cmp	r0, r1
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	eb01 0402 	add.w	r4, r1, r2
 8005f64:	d902      	bls.n	8005f6c <memmove+0x10>
 8005f66:	4284      	cmp	r4, r0
 8005f68:	4623      	mov	r3, r4
 8005f6a:	d807      	bhi.n	8005f7c <memmove+0x20>
 8005f6c:	1e43      	subs	r3, r0, #1
 8005f6e:	42a1      	cmp	r1, r4
 8005f70:	d008      	beq.n	8005f84 <memmove+0x28>
 8005f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f7a:	e7f8      	b.n	8005f6e <memmove+0x12>
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4601      	mov	r1, r0
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d100      	bne.n	8005f86 <memmove+0x2a>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f8e:	e7f7      	b.n	8005f80 <memmove+0x24>

08005f90 <_free_r>:
 8005f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f92:	2900      	cmp	r1, #0
 8005f94:	d044      	beq.n	8006020 <_free_r+0x90>
 8005f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f9a:	9001      	str	r0, [sp, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005fa2:	bfb8      	it	lt
 8005fa4:	18e4      	addlt	r4, r4, r3
 8005fa6:	f000 f913 	bl	80061d0 <__malloc_lock>
 8005faa:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <_free_r+0x94>)
 8005fac:	9801      	ldr	r0, [sp, #4]
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	b933      	cbnz	r3, 8005fc0 <_free_r+0x30>
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	6014      	str	r4, [r2, #0]
 8005fb6:	b003      	add	sp, #12
 8005fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fbc:	f000 b90e 	b.w	80061dc <__malloc_unlock>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d908      	bls.n	8005fd6 <_free_r+0x46>
 8005fc4:	6825      	ldr	r5, [r4, #0]
 8005fc6:	1961      	adds	r1, r4, r5
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	bf01      	itttt	eq
 8005fcc:	6819      	ldreq	r1, [r3, #0]
 8005fce:	685b      	ldreq	r3, [r3, #4]
 8005fd0:	1949      	addeq	r1, r1, r5
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	e7ed      	b.n	8005fb2 <_free_r+0x22>
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b10b      	cbz	r3, 8005fe0 <_free_r+0x50>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d9fa      	bls.n	8005fd6 <_free_r+0x46>
 8005fe0:	6811      	ldr	r1, [r2, #0]
 8005fe2:	1855      	adds	r5, r2, r1
 8005fe4:	42a5      	cmp	r5, r4
 8005fe6:	d10b      	bne.n	8006000 <_free_r+0x70>
 8005fe8:	6824      	ldr	r4, [r4, #0]
 8005fea:	4421      	add	r1, r4
 8005fec:	1854      	adds	r4, r2, r1
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	6011      	str	r1, [r2, #0]
 8005ff2:	d1e0      	bne.n	8005fb6 <_free_r+0x26>
 8005ff4:	681c      	ldr	r4, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	6053      	str	r3, [r2, #4]
 8005ffa:	4421      	add	r1, r4
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	e7da      	b.n	8005fb6 <_free_r+0x26>
 8006000:	d902      	bls.n	8006008 <_free_r+0x78>
 8006002:	230c      	movs	r3, #12
 8006004:	6003      	str	r3, [r0, #0]
 8006006:	e7d6      	b.n	8005fb6 <_free_r+0x26>
 8006008:	6825      	ldr	r5, [r4, #0]
 800600a:	1961      	adds	r1, r4, r5
 800600c:	428b      	cmp	r3, r1
 800600e:	bf04      	itt	eq
 8006010:	6819      	ldreq	r1, [r3, #0]
 8006012:	685b      	ldreq	r3, [r3, #4]
 8006014:	6063      	str	r3, [r4, #4]
 8006016:	bf04      	itt	eq
 8006018:	1949      	addeq	r1, r1, r5
 800601a:	6021      	streq	r1, [r4, #0]
 800601c:	6054      	str	r4, [r2, #4]
 800601e:	e7ca      	b.n	8005fb6 <_free_r+0x26>
 8006020:	b003      	add	sp, #12
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	200001ac 	.word	0x200001ac

08006028 <sbrk_aligned>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	4e0e      	ldr	r6, [pc, #56]	; (8006064 <sbrk_aligned+0x3c>)
 800602c:	460c      	mov	r4, r1
 800602e:	6831      	ldr	r1, [r6, #0]
 8006030:	4605      	mov	r5, r0
 8006032:	b911      	cbnz	r1, 800603a <sbrk_aligned+0x12>
 8006034:	f000 f8bc 	bl	80061b0 <_sbrk_r>
 8006038:	6030      	str	r0, [r6, #0]
 800603a:	4621      	mov	r1, r4
 800603c:	4628      	mov	r0, r5
 800603e:	f000 f8b7 	bl	80061b0 <_sbrk_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d00a      	beq.n	800605c <sbrk_aligned+0x34>
 8006046:	1cc4      	adds	r4, r0, #3
 8006048:	f024 0403 	bic.w	r4, r4, #3
 800604c:	42a0      	cmp	r0, r4
 800604e:	d007      	beq.n	8006060 <sbrk_aligned+0x38>
 8006050:	1a21      	subs	r1, r4, r0
 8006052:	4628      	mov	r0, r5
 8006054:	f000 f8ac 	bl	80061b0 <_sbrk_r>
 8006058:	3001      	adds	r0, #1
 800605a:	d101      	bne.n	8006060 <sbrk_aligned+0x38>
 800605c:	f04f 34ff 	mov.w	r4, #4294967295
 8006060:	4620      	mov	r0, r4
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	200001b0 	.word	0x200001b0

08006068 <_malloc_r>:
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	1ccd      	adds	r5, r1, #3
 800606e:	f025 0503 	bic.w	r5, r5, #3
 8006072:	3508      	adds	r5, #8
 8006074:	2d0c      	cmp	r5, #12
 8006076:	bf38      	it	cc
 8006078:	250c      	movcc	r5, #12
 800607a:	2d00      	cmp	r5, #0
 800607c:	4607      	mov	r7, r0
 800607e:	db01      	blt.n	8006084 <_malloc_r+0x1c>
 8006080:	42a9      	cmp	r1, r5
 8006082:	d905      	bls.n	8006090 <_malloc_r+0x28>
 8006084:	230c      	movs	r3, #12
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	2600      	movs	r6, #0
 800608a:	4630      	mov	r0, r6
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	4e2e      	ldr	r6, [pc, #184]	; (800614c <_malloc_r+0xe4>)
 8006092:	f000 f89d 	bl	80061d0 <__malloc_lock>
 8006096:	6833      	ldr	r3, [r6, #0]
 8006098:	461c      	mov	r4, r3
 800609a:	bb34      	cbnz	r4, 80060ea <_malloc_r+0x82>
 800609c:	4629      	mov	r1, r5
 800609e:	4638      	mov	r0, r7
 80060a0:	f7ff ffc2 	bl	8006028 <sbrk_aligned>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	4604      	mov	r4, r0
 80060a8:	d14d      	bne.n	8006146 <_malloc_r+0xde>
 80060aa:	6834      	ldr	r4, [r6, #0]
 80060ac:	4626      	mov	r6, r4
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	d140      	bne.n	8006134 <_malloc_r+0xcc>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	4631      	mov	r1, r6
 80060b6:	4638      	mov	r0, r7
 80060b8:	eb04 0803 	add.w	r8, r4, r3
 80060bc:	f000 f878 	bl	80061b0 <_sbrk_r>
 80060c0:	4580      	cmp	r8, r0
 80060c2:	d13a      	bne.n	800613a <_malloc_r+0xd2>
 80060c4:	6821      	ldr	r1, [r4, #0]
 80060c6:	3503      	adds	r5, #3
 80060c8:	1a6d      	subs	r5, r5, r1
 80060ca:	f025 0503 	bic.w	r5, r5, #3
 80060ce:	3508      	adds	r5, #8
 80060d0:	2d0c      	cmp	r5, #12
 80060d2:	bf38      	it	cc
 80060d4:	250c      	movcc	r5, #12
 80060d6:	4629      	mov	r1, r5
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ffa5 	bl	8006028 <sbrk_aligned>
 80060de:	3001      	adds	r0, #1
 80060e0:	d02b      	beq.n	800613a <_malloc_r+0xd2>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	442b      	add	r3, r5
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	e00e      	b.n	8006108 <_malloc_r+0xa0>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	1b52      	subs	r2, r2, r5
 80060ee:	d41e      	bmi.n	800612e <_malloc_r+0xc6>
 80060f0:	2a0b      	cmp	r2, #11
 80060f2:	d916      	bls.n	8006122 <_malloc_r+0xba>
 80060f4:	1961      	adds	r1, r4, r5
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	6025      	str	r5, [r4, #0]
 80060fa:	bf18      	it	ne
 80060fc:	6059      	strne	r1, [r3, #4]
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	bf08      	it	eq
 8006102:	6031      	streq	r1, [r6, #0]
 8006104:	5162      	str	r2, [r4, r5]
 8006106:	604b      	str	r3, [r1, #4]
 8006108:	4638      	mov	r0, r7
 800610a:	f104 060b 	add.w	r6, r4, #11
 800610e:	f000 f865 	bl	80061dc <__malloc_unlock>
 8006112:	f026 0607 	bic.w	r6, r6, #7
 8006116:	1d23      	adds	r3, r4, #4
 8006118:	1af2      	subs	r2, r6, r3
 800611a:	d0b6      	beq.n	800608a <_malloc_r+0x22>
 800611c:	1b9b      	subs	r3, r3, r6
 800611e:	50a3      	str	r3, [r4, r2]
 8006120:	e7b3      	b.n	800608a <_malloc_r+0x22>
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	42a3      	cmp	r3, r4
 8006126:	bf0c      	ite	eq
 8006128:	6032      	streq	r2, [r6, #0]
 800612a:	605a      	strne	r2, [r3, #4]
 800612c:	e7ec      	b.n	8006108 <_malloc_r+0xa0>
 800612e:	4623      	mov	r3, r4
 8006130:	6864      	ldr	r4, [r4, #4]
 8006132:	e7b2      	b.n	800609a <_malloc_r+0x32>
 8006134:	4634      	mov	r4, r6
 8006136:	6876      	ldr	r6, [r6, #4]
 8006138:	e7b9      	b.n	80060ae <_malloc_r+0x46>
 800613a:	230c      	movs	r3, #12
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4638      	mov	r0, r7
 8006140:	f000 f84c 	bl	80061dc <__malloc_unlock>
 8006144:	e7a1      	b.n	800608a <_malloc_r+0x22>
 8006146:	6025      	str	r5, [r4, #0]
 8006148:	e7de      	b.n	8006108 <_malloc_r+0xa0>
 800614a:	bf00      	nop
 800614c:	200001ac 	.word	0x200001ac

08006150 <_realloc_r>:
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	4680      	mov	r8, r0
 8006156:	4614      	mov	r4, r2
 8006158:	460e      	mov	r6, r1
 800615a:	b921      	cbnz	r1, 8006166 <_realloc_r+0x16>
 800615c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	4611      	mov	r1, r2
 8006162:	f7ff bf81 	b.w	8006068 <_malloc_r>
 8006166:	b92a      	cbnz	r2, 8006174 <_realloc_r+0x24>
 8006168:	f7ff ff12 	bl	8005f90 <_free_r>
 800616c:	4625      	mov	r5, r4
 800616e:	4628      	mov	r0, r5
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	f000 f838 	bl	80061e8 <_malloc_usable_size_r>
 8006178:	4284      	cmp	r4, r0
 800617a:	4607      	mov	r7, r0
 800617c:	d802      	bhi.n	8006184 <_realloc_r+0x34>
 800617e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006182:	d812      	bhi.n	80061aa <_realloc_r+0x5a>
 8006184:	4621      	mov	r1, r4
 8006186:	4640      	mov	r0, r8
 8006188:	f7ff ff6e 	bl	8006068 <_malloc_r>
 800618c:	4605      	mov	r5, r0
 800618e:	2800      	cmp	r0, #0
 8006190:	d0ed      	beq.n	800616e <_realloc_r+0x1e>
 8006192:	42bc      	cmp	r4, r7
 8006194:	4622      	mov	r2, r4
 8006196:	4631      	mov	r1, r6
 8006198:	bf28      	it	cs
 800619a:	463a      	movcs	r2, r7
 800619c:	f7ff fed0 	bl	8005f40 <memcpy>
 80061a0:	4631      	mov	r1, r6
 80061a2:	4640      	mov	r0, r8
 80061a4:	f7ff fef4 	bl	8005f90 <_free_r>
 80061a8:	e7e1      	b.n	800616e <_realloc_r+0x1e>
 80061aa:	4635      	mov	r5, r6
 80061ac:	e7df      	b.n	800616e <_realloc_r+0x1e>
	...

080061b0 <_sbrk_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d06      	ldr	r5, [pc, #24]	; (80061cc <_sbrk_r+0x1c>)
 80061b4:	2300      	movs	r3, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fb fa56 	bl	800166c <_sbrk>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_sbrk_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_sbrk_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200001b4 	.word	0x200001b4

080061d0 <__malloc_lock>:
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <__malloc_lock+0x8>)
 80061d2:	f000 b811 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 80061d6:	bf00      	nop
 80061d8:	200001b8 	.word	0x200001b8

080061dc <__malloc_unlock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__malloc_unlock+0x8>)
 80061de:	f000 b80c 	b.w	80061fa <__retarget_lock_release_recursive>
 80061e2:	bf00      	nop
 80061e4:	200001b8 	.word	0x200001b8

080061e8 <_malloc_usable_size_r>:
 80061e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ec:	1f18      	subs	r0, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfbc      	itt	lt
 80061f2:	580b      	ldrlt	r3, [r1, r0]
 80061f4:	18c0      	addlt	r0, r0, r3
 80061f6:	4770      	bx	lr

080061f8 <__retarget_lock_acquire_recursive>:
 80061f8:	4770      	bx	lr

080061fa <__retarget_lock_release_recursive>:
 80061fa:	4770      	bx	lr

080061fc <_init>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	bf00      	nop
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr

08006208 <_fini>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr
